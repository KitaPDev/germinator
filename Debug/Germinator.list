
Germinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d0  080042d0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042d8  080042d8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  080044bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080044bc  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b55a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7d  00000000  00000000  0002b766  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bd8  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167d0  00000000  00000000  0002e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e96  00000000  00000000  00045180  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d1a4  00000000  00000000  0004e016  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db1ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  000db238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080040c4 	.word	0x080040c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080040c4 	.word	0x080040c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000590:	b598      	push	{r3, r4, r7, lr}
 8000592:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000594:	f000 feee 	bl	8001374 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000598:	f000 f8c2 	bl	8000720 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059c:	f000 f952 	bl	8000844 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005a0:	f000 f926 	bl	80007f0 <MX_USART2_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (readButton(Plus_GPIO_Port, Plus_Pin)) {
 80005a4:	2101      	movs	r1, #1
 80005a6:	4853      	ldr	r0, [pc, #332]	; (80006f4 <main+0x164>)
 80005a8:	f000 fa25 	bl	80009f6 <readButton>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d029      	beq.n	8000606 <main+0x76>
			if (ledTimeout < HAL_GetTick()) {
 80005b2:	f000 ff15 	bl	80013e0 <HAL_GetTick>
 80005b6:	4602      	mov	r2, r0
 80005b8:	4b4f      	ldr	r3, [pc, #316]	; (80006f8 <main+0x168>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d90a      	bls.n	80005d6 <main+0x46>
				ledTimeout = HAL_GetTick() + 3600000;
 80005c0:	f000 ff0e 	bl	80013e0 <HAL_GetTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	f503 135b 	add.w	r3, r3, #3588096	; 0x36c000
 80005ca:	f503 533a 	add.w	r3, r3, #11904	; 0x2e80
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <main+0x168>)
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e011      	b.n	80005fa <main+0x6a>

			} else if (ledTimeout - HAL_GetTick() < 356400000) {
 80005d6:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <main+0x168>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	461c      	mov	r4, r3
 80005dc:	f000 ff00 	bl	80013e0 <HAL_GetTick>
 80005e0:	4603      	mov	r3, r0
 80005e2:	1ae3      	subs	r3, r4, r3
 80005e4:	4a45      	ldr	r2, [pc, #276]	; (80006fc <main+0x16c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d807      	bhi.n	80005fa <main+0x6a>
				ledTimeout += 3600000;
 80005ea:	4b43      	ldr	r3, [pc, #268]	; (80006f8 <main+0x168>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f503 135b 	add.w	r3, r3, #3588096	; 0x36c000
 80005f2:	f503 533a 	add.w	r3, r3, #11904	; 0x2e80
 80005f6:	4a40      	ldr	r2, [pc, #256]	; (80006f8 <main+0x168>)
 80005f8:	6013      	str	r3, [r2, #0]
			}

			tickClicked = HAL_GetTick();
 80005fa:	f000 fef1 	bl	80013e0 <HAL_GetTick>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b3f      	ldr	r3, [pc, #252]	; (8000700 <main+0x170>)
 8000604:	601a      	str	r2, [r3, #0]
		}

		if (readButton(Minus_GPIO_Port, Minus_Pin)) {
 8000606:	2102      	movs	r1, #2
 8000608:	483a      	ldr	r0, [pc, #232]	; (80006f4 <main+0x164>)
 800060a:	f000 f9f4 	bl	80009f6 <readButton>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d025      	beq.n	8000660 <main+0xd0>
			if (ledTimeout > HAL_GetTick()) {
 8000614:	f000 fee4 	bl	80013e0 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <main+0x168>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	429a      	cmp	r2, r3
 8000620:	d218      	bcs.n	8000654 <main+0xc4>

				if (ledTimeout - HAL_GetTick() < 3600000) {
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <main+0x168>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	461c      	mov	r4, r3
 8000628:	f000 feda 	bl	80013e0 <HAL_GetTick>
 800062c:	4603      	mov	r3, r0
 800062e:	1ae3      	subs	r3, r4, r3
 8000630:	4a34      	ldr	r2, [pc, #208]	; (8000704 <main+0x174>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d806      	bhi.n	8000644 <main+0xb4>
					ledTimeout = HAL_GetTick();
 8000636:	f000 fed3 	bl	80013e0 <HAL_GetTick>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <main+0x168>)
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e007      	b.n	8000654 <main+0xc4>

				} else {
					ledTimeout -= 3600000;
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <main+0x168>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f5a3 135b 	sub.w	r3, r3, #3588096	; 0x36c000
 800064c:	f5a3 533a 	sub.w	r3, r3, #11904	; 0x2e80
 8000650:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <main+0x168>)
 8000652:	6013      	str	r3, [r2, #0]
				}
			}

			tickClicked = HAL_GetTick();
 8000654:	f000 fec4 	bl	80013e0 <HAL_GetTick>
 8000658:	4603      	mov	r3, r0
 800065a:	461a      	mov	r2, r3
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <main+0x170>)
 800065e:	601a      	str	r2, [r3, #0]
		}

		if (ledTimeout > HAL_GetTick()) {
 8000660:	f000 febe 	bl	80013e0 <HAL_GetTick>
 8000664:	4602      	mov	r2, r0
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <main+0x168>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d206      	bcs.n	800067c <main+0xec>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000674:	4824      	ldr	r0, [pc, #144]	; (8000708 <main+0x178>)
 8000676:	f001 f95d 	bl	8001934 <HAL_GPIO_WritePin>
 800067a:	e005      	b.n	8000688 <main+0xf8>
		} else {
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4821      	ldr	r0, [pc, #132]	; (8000708 <main+0x178>)
 8000684:	f001 f956 	bl	8001934 <HAL_GPIO_WritePin>
		}

		if (readButton(Motor_GPIO_Port, Motor_Pin)) {
 8000688:	2101      	movs	r1, #1
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <main+0x17c>)
 800068c:	f000 f9b3 	bl	80009f6 <readButton>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d009      	beq.n	80006aa <main+0x11a>
			isMotorRunning = !isMotorRunning;
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <main+0x180>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	bf0c      	ite	eq
 800069e:	2301      	moveq	r3, #1
 80006a0:	2300      	movne	r3, #0
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <main+0x180>)
 80006a8:	601a      	str	r2, [r3, #0]
		}

		if (HAL_GetTick() % 3000 == 0) {
 80006aa:	f000 fe99 	bl	80013e0 <HAL_GetTick>
 80006ae:	4602      	mov	r2, r0
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <main+0x184>)
 80006b2:	fba3 1302 	umull	r1, r3, r3, r2
 80006b6:	099b      	lsrs	r3, r3, #6
 80006b8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80006bc:	fb01 f303 	mul.w	r3, r1, r3
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d103      	bne.n	80006ce <main+0x13e>
			readDHT11(&temperature, &humidity);
 80006c6:	4914      	ldr	r1, [pc, #80]	; (8000718 <main+0x188>)
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <main+0x18c>)
 80006ca:	f000 fadf 	bl	8000c8c <readDHT11>
		}

		if (HAL_GetTick() - tickClicked < 5000) {
 80006ce:	f000 fe87 	bl	80013e0 <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <main+0x170>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	f241 3287 	movw	r2, #4999	; 0x1387
 80006de:	4293      	cmp	r3, r2
 80006e0:	d802      	bhi.n	80006e8 <main+0x158>
			ssDisplayLightOnHour();
 80006e2:	f000 fa43 	bl	8000b6c <ssDisplayLightOnHour>
 80006e6:	e001      	b.n	80006ec <main+0x15c>
		} else {
			ssDisplayDHT11();
 80006e8:	f000 faa4 	bl	8000c34 <ssDisplayDHT11>
		}

		runMotor();
 80006ec:	f000 f9ac 	bl	8000a48 <runMotor>
		if (readButton(Plus_GPIO_Port, Plus_Pin)) {
 80006f0:	e758      	b.n	80005a4 <main+0x14>
 80006f2:	bf00      	nop
 80006f4:	40020800 	.word	0x40020800
 80006f8:	200001fc 	.word	0x200001fc
 80006fc:	153e3b7f 	.word	0x153e3b7f
 8000700:	20000214 	.word	0x20000214
 8000704:	0036ee7f 	.word	0x0036ee7f
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400
 8000710:	200001f8 	.word	0x200001f8
 8000714:	057619f1 	.word	0x057619f1
 8000718:	20000210 	.word	0x20000210
 800071c:	2000020c 	.word	0x2000020c

08000720 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	; 0x50
 8000724:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	; 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fbc0 	bl	8002eb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xc8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <SystemClock_Config+0xc8>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	; 0x40
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <SystemClock_Config+0xc8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <SystemClock_Config+0xcc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a20      	ldr	r2, [pc, #128]	; (80007ec <SystemClock_Config+0xcc>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <SystemClock_Config+0xcc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000794:	2364      	movs	r3, #100	; 0x64
 8000796:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 f8df 	bl	8001968 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
		Error_Handler();
 80007b0:	f000 fb2e 	bl	8000e10 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2103      	movs	r1, #3
 80007d0:	4618      	mov	r0, r3
 80007d2:	f001 fb39 	bl	8001e48 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc0>
		Error_Handler();
 80007dc:	f000 fb18 	bl	8000e10 <Error_Handler>
	}
}
 80007e0:	bf00      	nop
 80007e2:	3750      	adds	r7, #80	; 0x50
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40007000 	.word	0x40007000

080007f0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART2_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART2_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x4c>)
 8000828:	f001 ff50 	bl	80026cc <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000832:	f000 faed 	bl	8000e10 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000218 	.word	0x20000218
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <MX_GPIO_Init+0x170>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a54      	ldr	r2, [pc, #336]	; (80009b4 <MX_GPIO_Init+0x170>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <MX_GPIO_Init+0x170>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <MX_GPIO_Init+0x170>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a4d      	ldr	r2, [pc, #308]	; (80009b4 <MX_GPIO_Init+0x170>)
 8000880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <MX_GPIO_Init+0x170>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <MX_GPIO_Init+0x170>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a46      	ldr	r2, [pc, #280]	; (80009b4 <MX_GPIO_Init+0x170>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b44      	ldr	r3, [pc, #272]	; (80009b4 <MX_GPIO_Init+0x170>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b40      	ldr	r3, [pc, #256]	; (80009b4 <MX_GPIO_Init+0x170>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <MX_GPIO_Init+0x170>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MX_GPIO_Init+0x170>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin | DP_Pin | LED_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80008d0:	4839      	ldr	r0, [pc, #228]	; (80009b8 <MX_GPIO_Init+0x174>)
 80008d2:	f001 f82f 	bl	8001934 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 71f0 	movw	r1, #63472	; 0xf7f0
 80008dc:	4837      	ldr	r0, [pc, #220]	; (80009bc <MX_GPIO_Init+0x178>)
 80008de:	f001 f829 	bl	8001934 <HAL_GPIO_WritePin>
			G_Pin | IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin | A_Pin | B_Pin
					| C_Pin | D_Pin | E_Pin | F_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, D1_Pin | D2_Pin | D3_Pin | D4_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80008e8:	4835      	ldr	r0, [pc, #212]	; (80009c0 <MX_GPIO_Init+0x17c>)
 80008ea:	f001 f823 	bl	8001934 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f4:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x180>)
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	482f      	ldr	r0, [pc, #188]	; (80009c0 <MX_GPIO_Init+0x17c>)
 8000904:	f000 fe7c 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : Plus_Pin Minus_Pin */
	GPIO_InitStruct.Pin = Plus_Pin | Minus_Pin;
 8000908:	2303      	movs	r3, #3
 800090a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x17c>)
 800091c:	f000 fe70 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin DP_Pin LED_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | DP_Pin | LED_Pin;
 8000920:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000924:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	481f      	ldr	r0, [pc, #124]	; (80009b8 <MX_GPIO_Init+0x174>)
 800093a:	f000 fe61 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT11_Pin */
	GPIO_InitStruct.Pin = DHT11_Pin;
 800093e:	2310      	movs	r3, #16
 8000940:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x17c>)
 8000952:	f000 fe55 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pin : Motor_Pin */
	GPIO_InitStruct.Pin = Motor_Pin;
 8000956:	2301      	movs	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Motor_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_GPIO_Init+0x178>)
 800096a:	f000 fe49 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : G_Pin IN1_Pin IN2_Pin IN3_Pin
	 IN4_Pin A_Pin B_Pin C_Pin
	 D_Pin E_Pin F_Pin */
	GPIO_InitStruct.Pin = G_Pin | IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin | A_Pin
 800096e:	f24f 73f0 	movw	r3, #63472	; 0xf7f0
 8000972:	617b      	str	r3, [r7, #20]
			| B_Pin | C_Pin | D_Pin | E_Pin | F_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_GPIO_Init+0x178>)
 8000988:	f000 fe3a 	bl	8001600 <HAL_GPIO_Init>

	/*Configure GPIO pins : D1_Pin D2_Pin D3_Pin D4_Pin */
	GPIO_InitStruct.Pin = D1_Pin | D2_Pin | D3_Pin | D4_Pin;
 800098c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000990:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x17c>)
 80009a6:	f000 fe2b 	bl	8001600 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400
 80009c0:	40020800 	.word	0x40020800
 80009c4:	10210000 	.word	0x10210000

080009c8 <GPIO_Change_MODE>:

/* USER CODE BEGIN 4 */

static void GPIO_Change_MODE(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t Mode) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	460b      	mov	r3, r1
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	817b      	strh	r3, [r7, #10]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_Pin;
 80009d6:	897b      	ldrh	r3, [r7, #10]
 80009d8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = Mode;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 fe09 	bl	8001600 <HAL_GPIO_Init>
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <readButton>:

int readButton(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0) {
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	4619      	mov	r1, r3
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 ff7c 	bl	8001904 <HAL_GPIO_ReadPin>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d115      	bne.n	8000a3e <readButton+0x48>
		// Magic, let's wait for a bit
		HAL_Delay(10);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f000 fcf0 	bl	80013f8 <HAL_Delay>
		// It is really still down
		if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0) {
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f000 ff71 	bl	8001904 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d10a      	bne.n	8000a3e <readButton+0x48>
			// Wait while the button is still down
			while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == 0)
 8000a28:	bf00      	nop
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 ff68 	bl	8001904 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f7      	beq.n	8000a2a <readButton+0x34>
				;

			return 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <readButton+0x4a>
		}
	}

	return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <runMotor>:

void runMotor() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	if (isMotorRunning) {
 8000a4c:	4b45      	ldr	r3, [pc, #276]	; (8000b64 <runMotor+0x11c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d06c      	beq.n	8000b2e <runMotor+0xe6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4843      	ldr	r0, [pc, #268]	; (8000b68 <runMotor+0x120>)
 8000a5c:	f000 ff6a 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4840      	ldr	r0, [pc, #256]	; (8000b68 <runMotor+0x120>)
 8000a68:	f000 ff64 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a72:	483d      	ldr	r0, [pc, #244]	; (8000b68 <runMotor+0x120>)
 8000a74:	f000 ff5e 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	483a      	ldr	r0, [pc, #232]	; (8000b68 <runMotor+0x120>)
 8000a80:	f000 ff58 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fcb7 	bl	80013f8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4835      	ldr	r0, [pc, #212]	; (8000b68 <runMotor+0x120>)
 8000a92:	f000 ff4f 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000a96:	2201      	movs	r2, #1
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	4832      	ldr	r0, [pc, #200]	; (8000b68 <runMotor+0x120>)
 8000a9e:	f000 ff49 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa8:	482f      	ldr	r0, [pc, #188]	; (8000b68 <runMotor+0x120>)
 8000aaa:	f000 ff43 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab4:	482c      	ldr	r0, [pc, #176]	; (8000b68 <runMotor+0x120>)
 8000ab6:	f000 ff3d 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fc9c 	bl	80013f8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac6:	4828      	ldr	r0, [pc, #160]	; (8000b68 <runMotor+0x120>)
 8000ac8:	f000 ff34 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	4825      	ldr	r0, [pc, #148]	; (8000b68 <runMotor+0x120>)
 8000ad4:	f000 ff2e 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ade:	4822      	ldr	r0, [pc, #136]	; (8000b68 <runMotor+0x120>)
 8000ae0:	f000 ff28 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <runMotor+0x120>)
 8000aec:	f000 ff22 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f000 fc81 	bl	80013f8 <HAL_Delay>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afc:	481a      	ldr	r0, [pc, #104]	; (8000b68 <runMotor+0x120>)
 8000afe:	f000 ff19 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b08:	4817      	ldr	r0, [pc, #92]	; (8000b68 <runMotor+0x120>)
 8000b0a:	f000 ff13 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b14:	4814      	ldr	r0, [pc, #80]	; (8000b68 <runMotor+0x120>)
 8000b16:	f000 ff0d 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <runMotor+0x120>)
 8000b22:	f000 ff07 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 fc66 	bl	80013f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8000b2c:	e017      	b.n	8000b5e <runMotor+0x116>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <runMotor+0x120>)
 8000b36:	f000 fefd 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <runMotor+0x120>)
 8000b42:	f000 fef7 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <runMotor+0x120>)
 8000b4e:	f000 fef1 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <runMotor+0x120>)
 8000b5a:	f000 feeb 	bl	8001934 <HAL_GPIO_WritePin>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001f8 	.word	0x200001f8
 8000b68:	40020400 	.word	0x40020400

08000b6c <ssDisplayLightOnHour>:

void ssDisplayLightOnHour() {
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af02      	add	r7, sp, #8
	char buf[5] = "";
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	2300      	movs	r3, #0
 8000b78:	723b      	strb	r3, [r7, #8]

	if (ledTimeout > HAL_GetTick()) {
 8000b7a:	f000 fc31 	bl	80013e0 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <ssDisplayLightOnHour+0xac>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d23f      	bcs.n	8000c08 <ssDisplayLightOnHour+0x9c>
		int hours, minutes = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
		int diff = ledTimeout - HAL_GetTick();
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <ssDisplayLightOnHour+0xac>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	461c      	mov	r4, r3
 8000b92:	f000 fc25 	bl	80013e0 <HAL_GetTick>
 8000b96:	4603      	mov	r3, r0
 8000b98:	1ae3      	subs	r3, r4, r3
 8000b9a:	613b      	str	r3, [r7, #16]

		hours = diff / 3600000;
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <ssDisplayLightOnHour+0xb0>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1512      	asrs	r2, r2, #20
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	60fb      	str	r3, [r7, #12]
		minutes = (diff - (hours * 3600000)) / 60000;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <ssDisplayLightOnHour+0xb4>)
 8000bb0:	fb02 f203 	mul.w	r2, r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a1a      	ldr	r2, [pc, #104]	; (8000c24 <ssDisplayLightOnHour+0xb8>)
 8000bba:	fb82 1203 	smull	r1, r2, r2, r3
 8000bbe:	1392      	asrs	r2, r2, #14
 8000bc0:	17db      	asrs	r3, r3, #31
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]

		if (minutes < 10) {
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2b09      	cmp	r3, #9
 8000bca:	dc08      	bgt.n	8000bde <ssDisplayLightOnHour+0x72>
			snprintf(buf, sizeof(buf), "%d0%d", hours, minutes);
 8000bcc:	1d38      	adds	r0, r7, #4
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <ssDisplayLightOnHour+0xbc>)
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	f002 f974 	bl	8002ec4 <sniprintf>
 8000bdc:	e007      	b.n	8000bee <ssDisplayLightOnHour+0x82>

		} else {
			snprintf(buf, sizeof(buf), "%d%d", hours, minutes);
 8000bde:	1d38      	adds	r0, r7, #4
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <ssDisplayLightOnHour+0xc0>)
 8000be8:	2105      	movs	r1, #5
 8000bea:	f002 f96b 	bl	8002ec4 <sniprintf>
		}

		int data = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
		sscanf(buf, "%d", &data);
 8000bf2:	463a      	mov	r2, r7
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <ssDisplayLightOnHour+0xc4>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 f997 	bl	8002f2c <siscanf>

		ssDisplay(data);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f9d1 	bl	8000fa8 <ssDisplay>

	} else {
		ssDisplay(0);
	}
}
 8000c06:	e002      	b.n	8000c0e <ssDisplayLightOnHour+0xa2>
		ssDisplay(0);
 8000c08:	2000      	movs	r0, #0
 8000c0a:	f000 f9cd 	bl	8000fa8 <ssDisplay>
}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd90      	pop	{r4, r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001fc 	.word	0x200001fc
 8000c1c:	4a90be59 	.word	0x4a90be59
 8000c20:	ffc91180 	.word	0xffc91180
 8000c24:	45e7b273 	.word	0x45e7b273
 8000c28:	080040dc 	.word	0x080040dc
 8000c2c:	080040e4 	.word	0x080040e4
 8000c30:	080040ec 	.word	0x080040ec

08000c34 <ssDisplayDHT11>:

void ssDisplayDHT11() {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af02      	add	r7, sp, #8
	char buf[5] = "";
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	733b      	strb	r3, [r7, #12]
	snprintf(buf, sizeof(buf), "%d%d", (int) temperature, (int) humidity);
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <ssDisplayDHT11+0x48>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <ssDisplayDHT11+0x4c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f107 0008 	add.w	r0, r7, #8
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	4613      	mov	r3, r2
 8000c52:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <ssDisplayDHT11+0x50>)
 8000c54:	2105      	movs	r1, #5
 8000c56:	f002 f935 	bl	8002ec4 <sniprintf>

	int data = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
	sscanf(buf, "%d", &data);
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4908      	ldr	r1, [pc, #32]	; (8000c88 <ssDisplayDHT11+0x54>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f960 	bl	8002f2c <siscanf>

	ssDisplay(data);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f99a 	bl	8000fa8 <ssDisplay>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000020c 	.word	0x2000020c
 8000c80:	20000210 	.word	0x20000210
 8000c84:	080040e4 	.word	0x080040e4
 8000c88:	080040ec 	.word	0x080040ec

08000c8c <readDHT11>:

void readDHT11(int *pTemp, int *pHumi) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b090      	sub	sp, #64	; 0x40
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]

	int i = 0, low_time = 0, high_time = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
	unsigned char data[40] = { 0 };
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 f902 	bl	8002eb4 <memset>

	GPIO_Change_MODE(DHT11_GPIO_Port, DHT11_Pin, GPIO_MODE_OUTPUT_PP);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	484c      	ldr	r0, [pc, #304]	; (8000de8 <readDHT11+0x15c>)
 8000cb6:	f7ff fe87 	bl	80009c8 <GPIO_Change_MODE>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	484a      	ldr	r0, [pc, #296]	; (8000de8 <readDHT11+0x15c>)
 8000cc0:	f000 fe38 	bl	8001934 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000cc4:	2014      	movs	r0, #20
 8000cc6:	f000 fb97 	bl	80013f8 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2110      	movs	r1, #16
 8000cce:	4846      	ldr	r0, [pc, #280]	; (8000de8 <readDHT11+0x15c>)
 8000cd0:	f000 fe30 	bl	8001934 <HAL_GPIO_WritePin>
	GPIO_Change_MODE(DHT11_GPIO_Port, DHT11_Pin, GPIO_MODE_INPUT);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4843      	ldr	r0, [pc, #268]	; (8000de8 <readDHT11+0x15c>)
 8000cda:	f7ff fe75 	bl	80009c8 <GPIO_Change_MODE>

	/* Ignore the first HIGH, LOW, HIGH because they are initial signals */
	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 8000cde:	bf00      	nop
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	4841      	ldr	r0, [pc, #260]	; (8000de8 <readDHT11+0x15c>)
 8000ce4:	f000 fe0e 	bl	8001904 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d0f8      	beq.n	8000ce0 <readDHT11+0x54>
		; /* Skip the HIGH signal reception before the initial signal */

	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET)
 8000cee:	bf00      	nop
 8000cf0:	2110      	movs	r1, #16
 8000cf2:	483d      	ldr	r0, [pc, #244]	; (8000de8 <readDHT11+0x15c>)
 8000cf4:	f000 fe06 	bl	8001904 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f8      	beq.n	8000cf0 <readDHT11+0x64>
		; /* Wait until reception of initial LOW signal is completed */

	while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET)
 8000cfe:	bf00      	nop
 8000d00:	2110      	movs	r1, #16
 8000d02:	4839      	ldr	r0, [pc, #228]	; (8000de8 <readDHT11+0x15c>)
 8000d04:	f000 fdfe 	bl	8001904 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d0f8      	beq.n	8000d00 <readDHT11+0x74>

	/* Set 0 or 1 to data [0] to data [39] according to the length of LOW signal and HIGH signal.
	 * 1 The longer the better HIGH, the shorter if 0 signal
	 */

	for (i = 0; i < 40; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d12:	e02d      	b.n	8000d70 <readDHT11+0xe4>
		low_time = high_time = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
 8000d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* time measurement LOW signal */
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) {
 8000d1c:	e002      	b.n	8000d24 <readDHT11+0x98>
			low_time++;
 8000d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d20:	3301      	adds	r3, #1
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_RESET) {
 8000d24:	2110      	movs	r1, #16
 8000d26:	4830      	ldr	r0, [pc, #192]	; (8000de8 <readDHT11+0x15c>)
 8000d28:	f000 fdec 	bl	8001904 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f5      	beq.n	8000d1e <readDHT11+0x92>
		}

		/* HIGH signal time measurement */
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) {
 8000d32:	e002      	b.n	8000d3a <readDHT11+0xae>
			high_time++;
 8000d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d36:	3301      	adds	r3, #1
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
		while (HAL_GPIO_ReadPin(DHT11_GPIO_Port, DHT11_Pin) == GPIO_PIN_SET) {
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	482a      	ldr	r0, [pc, #168]	; (8000de8 <readDHT11+0x15c>)
 8000d3e:	f000 fde1 	bl	8001904 <HAL_GPIO_ReadPin>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d0f5      	beq.n	8000d34 <readDHT11+0xa8>
		}

		if (high_time > low_time) {
 8000d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dd06      	ble.n	8000d5e <readDHT11+0xd2>
			data[i] = 1;
 8000d50:	f107 020c 	add.w	r2, r7, #12
 8000d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d56:	4413      	add	r3, r2
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	e005      	b.n	8000d6a <readDHT11+0xde>
		} else {
			data[i] = 0;
 8000d5e:	f107 020c 	add.w	r2, r7, #12
 8000d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d64:	4413      	add	r3, r2
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 40; i++) {
 8000d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d72:	2b27      	cmp	r3, #39	; 0x27
 8000d74:	ddce      	ble.n	8000d14 <readDHT11+0x88>
	 * Temperature: Convert 8 bits of
	 data [16] to data [23] to decimal

	 */

	*pHumi = data[0] * 128 + data[1] * 64 + data[2] * 32 + data[3] * 16
 8000d76:	7b3b      	ldrb	r3, [r7, #12]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	7b7a      	ldrb	r2, [r7, #13]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	7bba      	ldrb	r2, [r7, #14]
 8000d82:	4413      	add	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	4413      	add	r3, r2
			+ data[4] * 8 + data[5] * 4 + data[6] * 2 + data[7] * 1;
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	7c3a      	ldrb	r2, [r7, #16]
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	7c7a      	ldrb	r2, [r7, #17]
 8000d94:	4413      	add	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	7cba      	ldrb	r2, [r7, #18]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	7cfa      	ldrb	r2, [r7, #19]
 8000da0:	441a      	add	r2, r3
	*pHumi = data[0] * 128 + data[1] * 64 + data[2] * 32 + data[3] * 16
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	601a      	str	r2, [r3, #0]
	*pTemp = data[16] * 128 + data[17] * 64 + data[18] * 32 + data[19] * 16
 8000da6:	7f3b      	ldrb	r3, [r7, #28]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	7f7a      	ldrb	r2, [r7, #29]
 8000dac:	4413      	add	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	7fba      	ldrb	r2, [r7, #30]
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	7ffa      	ldrb	r2, [r7, #31]
 8000db8:	4413      	add	r3, r2
			+ data[20] * 8 + data[21] * 4 + data[22] * 2 + data[23] * 1;
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000dd0:	4413      	add	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dd8:	441a      	add	r2, r3
	*pTemp = data[16] * 128 + data[17] * 64 + data[18] * 32 + data[19] * 16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	601a      	str	r2, [r3, #0]
}
 8000dde:	bf00      	nop
 8000de0:	3740      	adds	r7, #64	; 0x40
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40020800 	.word	0x40020800

08000dec <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d101      	bne.n	8000e02 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000dfe:	f000 fadb 	bl	80013b8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40000800 	.word	0x40000800

08000e10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <ssSetDigit>:
#include "sevensegment.h"
#include "main.h"

void ssSetDigit(int digit) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	switch (digit) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d83d      	bhi.n	8000eac <ssSetDigit+0x8c>
 8000e30:	a201      	add	r2, pc, #4	; (adr r2, 8000e38 <ssSetDigit+0x18>)
 8000e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e36:	bf00      	nop
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e61 	.word	0x08000e61
 8000e40:	08000e79 	.word	0x08000e79
 8000e44:	08000e93 	.word	0x08000e93
	case 1:
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2140      	movs	r1, #64	; 0x40
 8000e4c:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <ssSetDigit+0x94>)
 8000e4e:	f000 fd71 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D2_Pin | D3_Pin | D4_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000e58:	4816      	ldr	r0, [pc, #88]	; (8000eb4 <ssSetDigit+0x94>)
 8000e5a:	f000 fd6b 	bl	8001934 <HAL_GPIO_WritePin>
		break;
 8000e5e:	e025      	b.n	8000eac <ssSetDigit+0x8c>

	case 2:
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2180      	movs	r1, #128	; 0x80
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <ssSetDigit+0x94>)
 8000e66:	f000 fd65 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin | D3_Pin | D4_Pin, GPIO_PIN_SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7150 	mov.w	r1, #832	; 0x340
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <ssSetDigit+0x94>)
 8000e72:	f000 fd5f 	bl	8001934 <HAL_GPIO_WritePin>
		break;
 8000e76:	e019      	b.n	8000eac <ssSetDigit+0x8c>

	case 3:
		HAL_GPIO_WritePin(D2_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <ssSetDigit+0x94>)
 8000e80:	f000 fd58 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin | D2_Pin | D4_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8000e8a:	480a      	ldr	r0, [pc, #40]	; (8000eb4 <ssSetDigit+0x94>)
 8000e8c:	f000 fd52 	bl	8001934 <HAL_GPIO_WritePin>
		break;
 8000e90:	e00c      	b.n	8000eac <ssSetDigit+0x8c>

	case 4:
		HAL_GPIO_WritePin(D2_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <ssSetDigit+0x94>)
 8000e9a:	f000 fd4b 	bl	8001934 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin | D2_Pin | D3_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ssSetDigit+0x94>)
 8000ea6:	f000 fd45 	bl	8001934 <HAL_GPIO_WritePin>
		break;
 8000eaa:	bf00      	nop
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020800 	.word	0x40020800

08000eb8 <ssDisplayZero>:

void ssDisplayZero() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port,
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <ssDisplayZero+0x14>)
 8000ec4:	f000 fd36 	bl	8001934 <HAL_GPIO_WritePin>
	A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin, GPIO_PIN_SET);
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40020400 	.word	0x40020400

08000ed0 <ssDisplayOne>:

void ssDisplayOne() {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, B_Pin | C_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2160      	movs	r1, #96	; 0x60
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <ssDisplayOne+0x14>)
 8000eda:	f000 fd2b 	bl	8001934 <HAL_GPIO_WritePin>
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <ssDisplayTwo>:

void ssDisplayTwo() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin | B_Pin | G_Pin | E_Pin | D_Pin,
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
 8000ef2:	4802      	ldr	r0, [pc, #8]	; (8000efc <ssDisplayTwo+0x14>)
 8000ef4:	f000 fd1e 	bl	8001934 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020400 	.word	0x40020400

08000f00 <ssDisplayThree>:

void ssDisplayThree() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin | B_Pin | C_Pin | D_Pin | G_Pin,
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
 8000f0a:	4802      	ldr	r0, [pc, #8]	; (8000f14 <ssDisplayThree+0x14>)
 8000f0c:	f000 fd12 	bl	8001934 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020400 	.word	0x40020400

08000f18 <ssDisplayFour>:

void ssDisplayFour() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin | C_Pin | G_Pin | F_Pin, GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8000f22:	4802      	ldr	r0, [pc, #8]	; (8000f2c <ssDisplayFour+0x14>)
 8000f24:	f000 fd06 	bl	8001934 <HAL_GPIO_WritePin>
}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020400 	.word	0x40020400

08000f30 <ssDisplayFive>:

void ssDisplayFive() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin | C_Pin | D_Pin | G_Pin | F_Pin,
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 61da 	mov.w	r1, #1744	; 0x6d0
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <ssDisplayFive+0x14>)
 8000f3c:	f000 fcfa 	bl	8001934 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40020400 	.word	0x40020400

08000f48 <ssDisplaySix>:

void ssDisplaySix() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port,
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <ssDisplaySix+0x14>)
 8000f54:	f000 fcee 	bl	8001934 <HAL_GPIO_WritePin>
	A_Pin | G_Pin | C_Pin | D_Pin | E_Pin | F_Pin, GPIO_PIN_SET);
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020400 	.word	0x40020400

08000f60 <ssDisplaySeven>:

void ssDisplaySeven() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin | B_Pin | C_Pin, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2170      	movs	r1, #112	; 0x70
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <ssDisplaySeven+0x14>)
 8000f6a:	f000 fce3 	bl	8001934 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020400 	.word	0x40020400

08000f78 <ssDisplayEight>:

void ssDisplayEight() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port,
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <ssDisplayEight+0x14>)
 8000f84:	f000 fcd6 	bl	8001934 <HAL_GPIO_WritePin>
	A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_SET);
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40020400 	.word	0x40020400

08000f90 <ssDisplayNine>:

void ssDisplayNine() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin | B_Pin | C_Pin | D_Pin | G_Pin | F_Pin,
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <ssDisplayNine+0x14>)
 8000f9c:	f000 fcca 	bl	8001934 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <ssDisplay>:

void ssDisplay(int num) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]

	for (int i = 1; i <= 4; i++) {
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	e059      	b.n	800106a <ssDisplay+0xc2>
		int digit = num % 10;
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <ssDisplay+0xd0>)
 8000fba:	fb83 1302 	smull	r1, r3, r3, r2
 8000fbe:	1099      	asrs	r1, r3, #2
 8000fc0:	17d3      	asrs	r3, r2, #31
 8000fc2:	1ac9      	subs	r1, r1, r3
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	60bb      	str	r3, [r7, #8]
		num /= 10;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a29      	ldr	r2, [pc, #164]	; (8001078 <ssDisplay+0xd0>)
 8000fd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd8:	1092      	asrs	r2, r2, #2
 8000fda:	17db      	asrs	r3, r3, #31
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	607b      	str	r3, [r7, #4]

		ssSetDigit(i);
 8000fe0:	68f8      	ldr	r0, [r7, #12]
 8000fe2:	f7ff ff1d 	bl	8000e20 <ssSetDigit>

		switch (digit) {
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d835      	bhi.n	8001058 <ssDisplay+0xb0>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <ssDisplay+0x4c>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	0800101d 	.word	0x0800101d
 8000ff8:	08001023 	.word	0x08001023
 8000ffc:	08001029 	.word	0x08001029
 8001000:	0800102f 	.word	0x0800102f
 8001004:	08001035 	.word	0x08001035
 8001008:	0800103b 	.word	0x0800103b
 800100c:	08001041 	.word	0x08001041
 8001010:	08001047 	.word	0x08001047
 8001014:	0800104d 	.word	0x0800104d
 8001018:	08001053 	.word	0x08001053
		case 0:
			ssDisplayZero();
 800101c:	f7ff ff4c 	bl	8000eb8 <ssDisplayZero>
			break;
 8001020:	e01a      	b.n	8001058 <ssDisplay+0xb0>
		case 1:
			ssDisplayOne();
 8001022:	f7ff ff55 	bl	8000ed0 <ssDisplayOne>
			break;
 8001026:	e017      	b.n	8001058 <ssDisplay+0xb0>
		case 2:
			ssDisplayTwo();
 8001028:	f7ff ff5e 	bl	8000ee8 <ssDisplayTwo>
			break;
 800102c:	e014      	b.n	8001058 <ssDisplay+0xb0>
		case 3:
			ssDisplayThree();
 800102e:	f7ff ff67 	bl	8000f00 <ssDisplayThree>
			break;
 8001032:	e011      	b.n	8001058 <ssDisplay+0xb0>
		case 4:
			ssDisplayFour();
 8001034:	f7ff ff70 	bl	8000f18 <ssDisplayFour>
			break;
 8001038:	e00e      	b.n	8001058 <ssDisplay+0xb0>
		case 5:
			ssDisplayFive();
 800103a:	f7ff ff79 	bl	8000f30 <ssDisplayFive>
			break;
 800103e:	e00b      	b.n	8001058 <ssDisplay+0xb0>
		case 6:
			ssDisplaySix();
 8001040:	f7ff ff82 	bl	8000f48 <ssDisplaySix>
			break;
 8001044:	e008      	b.n	8001058 <ssDisplay+0xb0>
		case 7:
			ssDisplaySeven();
 8001046:	f7ff ff8b 	bl	8000f60 <ssDisplaySeven>
			break;
 800104a:	e005      	b.n	8001058 <ssDisplay+0xb0>
		case 8:
			ssDisplayEight();
 800104c:	f7ff ff94 	bl	8000f78 <ssDisplayEight>
			break;
 8001050:	e002      	b.n	8001058 <ssDisplay+0xb0>
		case 9:
			ssDisplayNine();
 8001052:	f7ff ff9d 	bl	8000f90 <ssDisplayNine>
			break;
 8001056:	bf00      	nop
		}

		HAL_GPIO_WritePin(A_GPIO_Port,
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 800105e:	4807      	ldr	r0, [pc, #28]	; (800107c <ssDisplay+0xd4>)
 8001060:	f000 fc68 	bl	8001934 <HAL_GPIO_WritePin>
	for (int i = 1; i <= 4; i++) {
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b04      	cmp	r3, #4
 800106e:	dda2      	ble.n	8000fb6 <ssDisplay+0xe>
		A_Pin | B_Pin | C_Pin | D_Pin | E_Pin | F_Pin | G_Pin, GPIO_PIN_RESET);
	}
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	66666667 	.word	0x66666667
 800107c:	40020400 	.word	0x40020400

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_MspInit+0x4c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_MspInit+0x4c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x4c>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40023800 	.word	0x40023800

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a19      	ldr	r2, [pc, #100]	; (8001154 <HAL_UART_MspInit+0x84>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_UART_MspInit+0x88>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x88>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_UART_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112a:	230c      	movs	r3, #12
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113a:	2307      	movs	r3, #7
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_UART_MspInit+0x8c>)
 8001146:	f000 fa5b 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40004400 	.word	0x40004400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	; 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	201e      	movs	r0, #30
 8001176:	f000 fa19 	bl	80015ac <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800117a:	201e      	movs	r0, #30
 800117c:	f000 fa32 	bl	80015e4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <HAL_InitTick+0xa4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <HAL_InitTick+0xa4>)
 800118a:	f043 0304 	orr.w	r3, r3, #4
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <HAL_InitTick+0xa4>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f840 	bl	800222c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80011ac:	f001 f816 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 80011b0:	4603      	mov	r3, r0
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_InitTick+0xa8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3b01      	subs	r3, #1
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_InitTick+0xac>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	; (8001210 <HAL_InitTick+0xb0>)
 80011c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_InitTick+0xac>)
 80011cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_InitTick+0xac>)
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_InitTick+0xac>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_InitTick+0xac>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <HAL_InitTick+0xac>)
 80011e6:	f001 f853 	bl	8002290 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d104      	bne.n	80011fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80011f0:	4806      	ldr	r0, [pc, #24]	; (800120c <HAL_InitTick+0xac>)
 80011f2:	f001 f882 	bl	80022fa <HAL_TIM_Base_Start_IT>
 80011f6:	4603      	mov	r3, r0
 80011f8:	e000      	b.n	80011fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	431bde83 	.word	0x431bde83
 800120c:	20000258 	.word	0x20000258
 8001210:	40000800 	.word	0x40000800

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM4_IRQHandler+0x10>)
 800127a:	f001 f862 	bl	8002342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000258 	.word	0x20000258

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f001 fdd2 	bl	8002e60 <__errno>
 80012bc:	4602      	mov	r2, r0
 80012be:	230c      	movs	r3, #12
 80012c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20020000 	.word	0x20020000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	20000200 	.word	0x20000200
 80012f0:	200002a0 	.word	0x200002a0

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemInit+0x28>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <SystemInit+0x28>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <SystemInit+0x28>)
 800130a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130e:	609a      	str	r2, [r3, #8]
#endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001324:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001326:	e003      	b.n	8001330 <LoopCopyDataInit>

08001328 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800132a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800132c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800132e:	3104      	adds	r1, #4

08001330 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001334:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001338:	d3f6      	bcc.n	8001328 <CopyDataInit>
  ldr  r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800133c:	e002      	b.n	8001344 <LoopFillZerobss>

0800133e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800133e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001340:	f842 3b04 	str.w	r3, [r2], #4

08001344 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001346:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001348:	d3f9      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffd3 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f001 fd8d 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff f91d 	bl	8000590 <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001358:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800135c:	080042e0 	.word	0x080042e0
  ldr  r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001364:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001368:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800136c:	200002a0 	.word	0x200002a0

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_Init+0x40>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_Init+0x40>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_Init+0x40>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f8fa 	bl	8001596 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fedc 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff fe6a 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000298 	.word	0x20000298

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000298 	.word	0x20000298

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_Delay+0x40>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000008 	.word	0x20000008

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	; (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	; (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	; (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff4c 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015be:	f7ff ff61 	bl	8001484 <__NVIC_GetPriorityGrouping>
 80015c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	6978      	ldr	r0, [r7, #20]
 80015ca:	f7ff ffb1 	bl	8001530 <NVIC_EncodePriority>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff80 	bl	80014dc <__NVIC_SetPriority>
}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff54 	bl	80014a0 <__NVIC_EnableIRQ>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e159      	b.n	80018d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8148 	bne.w	80018ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00b      	beq.n	800165a <HAL_GPIO_Init+0x5a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164e:	2b11      	cmp	r3, #17
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b12      	cmp	r3, #18
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0xfc>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a2 	beq.w	80018ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2ec>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x202>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x1fe>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <HAL_GPIO_Init+0x2f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x1fa>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_GPIO_Init+0x2f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x1f6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x1f2>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x204>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x300>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x300>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x300>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x300>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f aea2 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	; 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691a      	ldr	r2, [r3, #16]
 8001914:	887b      	ldrh	r3, [r7, #2]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e25b      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4ba3      	ldr	r3, [pc, #652]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4ba0      	ldr	r3, [pc, #640]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b9d      	ldr	r3, [pc, #628]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b99      	ldr	r3, [pc, #612]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e236      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b91      	ldr	r3, [pc, #580]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a90      	ldr	r2, [pc, #576]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a8a      	ldr	r2, [pc, #552]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a87      	ldr	r2, [pc, #540]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a80      	ldr	r2, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fcde 	bl	80013e0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fcda 	bl	80013e0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1fb      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fcca 	bl	80013e0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fcc6 	bl	80013e0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1e7      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	4b65      	ldr	r3, [pc, #404]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1bb      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b56      	ldr	r3, [pc, #344]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4952      	ldr	r1, [pc, #328]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b4f      	ldr	r3, [pc, #316]	; (8001c18 <HAL_RCC_OscConfig+0x2b0>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc7f 	bl	80013e0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fc7b 	bl	80013e0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e19c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4940      	ldr	r1, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b3f      	ldr	r3, [pc, #252]	; (8001c18 <HAL_RCC_OscConfig+0x2b0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc5e 	bl	80013e0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc5a 	bl	80013e0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e17b      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d030      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_RCC_OscConfig+0x2b4>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fc3e 	bl	80013e0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fc3a 	bl	80013e0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e15b      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
 8001b86:	e015      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <HAL_RCC_OscConfig+0x2b4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fc27 	bl	80013e0 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fc23 	bl	80013e0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e144      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1f0      	bne.n	8001b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80a0 	beq.w	8001d02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc6:	4b13      	ldr	r3, [pc, #76]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10f      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_RCC_OscConfig+0x2ac>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_RCC_OscConfig+0x2b8>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fbe9 	bl	80013e0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	e011      	b.n	8001c36 <HAL_RCC_OscConfig+0x2ce>
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	42470000 	.word	0x42470000
 8001c1c:	42470e80 	.word	0x42470e80
 8001c20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c24:	f7ff fbdc 	bl	80013e0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e0fd      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x4d4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x2f0>
 8001c4a:	4b7d      	ldr	r3, [pc, #500]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a7c      	ldr	r2, [pc, #496]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	e01c      	b.n	8001c92 <HAL_RCC_OscConfig+0x32a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x312>
 8001c60:	4b77      	ldr	r3, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a76      	ldr	r2, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c66:	f043 0304 	orr.w	r3, r3, #4
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a73      	ldr	r2, [pc, #460]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e00b      	b.n	8001c92 <HAL_RCC_OscConfig+0x32a>
 8001c7a:	4b71      	ldr	r3, [pc, #452]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7e:	4a70      	ldr	r2, [pc, #448]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6713      	str	r3, [r2, #112]	; 0x70
 8001c86:	4b6e      	ldr	r3, [pc, #440]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a6d      	ldr	r2, [pc, #436]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d015      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff fba1 	bl	80013e0 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff fb9d 	bl	80013e0 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0bc      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb8:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ee      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x33a>
 8001cc4:	e014      	b.n	8001cf0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb8b 	bl	80013e0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fb87 	bl	80013e0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0a6      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ee      	bne.n	8001cce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d105      	bne.n	8001d02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf6:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	4a51      	ldr	r2, [pc, #324]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 8092 	beq.w	8001e30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d0c:	4b4c      	ldr	r3, [pc, #304]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d05c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d141      	bne.n	8001da4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b48      	ldr	r3, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x4dc>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff fb5b 	bl	80013e0 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff fb57 	bl	80013e0 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e078      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69da      	ldr	r2, [r3, #28]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	019b      	lsls	r3, r3, #6
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	061b      	lsls	r3, r3, #24
 8001d70:	4933      	ldr	r1, [pc, #204]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d76:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_RCC_OscConfig+0x4dc>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fb30 	bl	80013e0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7ff fb2c 	bl	80013e0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e04d      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x41c>
 8001da2:	e045      	b.n	8001e30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x4dc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb19 	bl	80013e0 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff fb15 	bl	80013e0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e036      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x44a>
 8001dd0:	e02e      	b.n	8001e30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e029      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x4d8>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e06:	4013      	ands	r3, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d106      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470060 	.word	0x42470060

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0cc      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b68      	ldr	r3, [pc, #416]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d90c      	bls.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b8      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb4:	4b53      	ldr	r3, [pc, #332]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4a52      	ldr	r2, [pc, #328]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b50      	ldr	r3, [pc, #320]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	494d      	ldr	r1, [pc, #308]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d044      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d119      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e07f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e06f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e067      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4b37      	ldr	r3, [pc, #220]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4934      	ldr	r1, [pc, #208]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f38:	f7ff fa52 	bl	80013e0 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7ff fa4e 	bl	80013e0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e04f      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b25      	ldr	r3, [pc, #148]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d20c      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e032      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4916      	ldr	r1, [pc, #88]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	490e      	ldr	r1, [pc, #56]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fce:	f000 f821 	bl	8002014 <HAL_RCC_GetSysClockFreq>
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe6:	4a09      	ldr	r2, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff f8b6 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00
 8002004:	40023800 	.word	0x40023800
 8002008:	080040fc 	.word	0x080040fc
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004

08002014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	2300      	movs	r3, #0
 8002024:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d007      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x32>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d008      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x38>
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 80b4 	bne.w	80021a8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002042:	60bb      	str	r3, [r7, #8]
       break;
 8002044:	e0b3      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002046:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002048:	60bb      	str	r3, [r7, #8]
      break;
 800204a:	e0b0      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b5a      	ldr	r3, [pc, #360]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04a      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	f04f 0400 	mov.w	r4, #0
 800206c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	ea03 0501 	and.w	r5, r3, r1
 8002078:	ea04 0602 	and.w	r6, r4, r2
 800207c:	4629      	mov	r1, r5
 800207e:	4632      	mov	r2, r6
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	0154      	lsls	r4, r2, #5
 800208a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800208e:	014b      	lsls	r3, r1, #5
 8002090:	4619      	mov	r1, r3
 8002092:	4622      	mov	r2, r4
 8002094:	1b49      	subs	r1, r1, r5
 8002096:	eb62 0206 	sbc.w	r2, r2, r6
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	0194      	lsls	r4, r2, #6
 80020a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020a8:	018b      	lsls	r3, r1, #6
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	eb64 0402 	sbc.w	r4, r4, r2
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	00e2      	lsls	r2, r4, #3
 80020ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020be:	00d9      	lsls	r1, r3, #3
 80020c0:	460b      	mov	r3, r1
 80020c2:	4614      	mov	r4, r2
 80020c4:	195b      	adds	r3, r3, r5
 80020c6:	eb44 0406 	adc.w	r4, r4, r6
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	0262      	lsls	r2, r4, #9
 80020d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020d8:	0259      	lsls	r1, r3, #9
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	4621      	mov	r1, r4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f04f 0400 	mov.w	r4, #0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	f7fe f8d0 	bl	8000290 <__aeabi_uldivmod>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	e049      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f8:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	f04f 0400 	mov.w	r4, #0
 8002102:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	ea03 0501 	and.w	r5, r3, r1
 800210e:	ea04 0602 	and.w	r6, r4, r2
 8002112:	4629      	mov	r1, r5
 8002114:	4632      	mov	r2, r6
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	0154      	lsls	r4, r2, #5
 8002120:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002124:	014b      	lsls	r3, r1, #5
 8002126:	4619      	mov	r1, r3
 8002128:	4622      	mov	r2, r4
 800212a:	1b49      	subs	r1, r1, r5
 800212c:	eb62 0206 	sbc.w	r2, r2, r6
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	0194      	lsls	r4, r2, #6
 800213a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800213e:	018b      	lsls	r3, r1, #6
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	eb64 0402 	sbc.w	r4, r4, r2
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	00e2      	lsls	r2, r4, #3
 8002150:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002154:	00d9      	lsls	r1, r3, #3
 8002156:	460b      	mov	r3, r1
 8002158:	4614      	mov	r4, r2
 800215a:	195b      	adds	r3, r3, r5
 800215c:	eb44 0406 	adc.w	r4, r4, r6
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	02a2      	lsls	r2, r4, #10
 800216a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800216e:	0299      	lsls	r1, r3, #10
 8002170:	460b      	mov	r3, r1
 8002172:	4614      	mov	r4, r2
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	f7fe f885 	bl	8000290 <__aeabi_uldivmod>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	60bb      	str	r3, [r7, #8]
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021aa:	60bb      	str	r3, [r7, #8]
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	68bb      	ldr	r3, [r7, #8]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4601      	mov	r1, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a9b      	lsrs	r3, r3, #10
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	0800410c 	.word	0x0800410c

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffdc 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 800220c:	4601      	mov	r1, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0b5b      	lsrs	r3, r3, #13
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4a03      	ldr	r2, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	0800410c 	.word	0x0800410c

0800222c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	220f      	movs	r2, #15
 800223a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCC_GetClockConfig+0x60>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 020f 	and.w	r2, r3, #15
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40023c00 	.word	0x40023c00

08002290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01d      	b.n	80022de <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f815 	bl	80022e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 f968 	bl	80025a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0201 	orr.w	r2, r2, #1
 8002310:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d007      	beq.n	8002334 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d122      	bne.n	800239e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d11b      	bne.n	800239e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f06f 0202 	mvn.w	r2, #2
 800236e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f8ee 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 800238a:	e005      	b.n	8002398 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f8e0 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8f1 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d122      	bne.n	80023f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d11b      	bne.n	80023f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f06f 0204 	mvn.w	r2, #4
 80023c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f8c4 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 80023de:	e005      	b.n	80023ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f8b6 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8c7 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d122      	bne.n	8002446 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d11b      	bne.n	8002446 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0208 	mvn.w	r2, #8
 8002416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f89a 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 8002432:	e005      	b.n	8002440 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f88c 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f89d 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b10      	cmp	r3, #16
 8002452:	d122      	bne.n	800249a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d11b      	bne.n	800249a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f06f 0210 	mvn.w	r2, #16
 800246a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2208      	movs	r2, #8
 8002470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f870 	bl	8002566 <HAL_TIM_IC_CaptureCallback>
 8002486:	e005      	b.n	8002494 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f862 	bl	8002552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f873 	bl	800257a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10e      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0201 	mvn.w	r2, #1
 80024be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7fe fc93 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d10e      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d107      	bne.n	80024f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8e3 	bl	80026b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d10e      	bne.n	800251e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d107      	bne.n	800251e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f838 	bl	800258e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b20      	cmp	r3, #32
 800252a:	d10e      	bne.n	800254a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d107      	bne.n	800254a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f06f 0220 	mvn.w	r2, #32
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8ad 	bl	80026a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
	...

080025a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a34      	ldr	r2, [pc, #208]	; (8002688 <TIM_Base_SetConfig+0xe4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00f      	beq.n	80025dc <TIM_Base_SetConfig+0x38>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d00b      	beq.n	80025dc <TIM_Base_SetConfig+0x38>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a31      	ldr	r2, [pc, #196]	; (800268c <TIM_Base_SetConfig+0xe8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x38>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a30      	ldr	r2, [pc, #192]	; (8002690 <TIM_Base_SetConfig+0xec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x38>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <TIM_Base_SetConfig+0xf0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <TIM_Base_SetConfig+0xe4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01b      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d017      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a22      	ldr	r2, [pc, #136]	; (800268c <TIM_Base_SetConfig+0xe8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d013      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a21      	ldr	r2, [pc, #132]	; (8002690 <TIM_Base_SetConfig+0xec>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00f      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a20      	ldr	r2, [pc, #128]	; (8002694 <TIM_Base_SetConfig+0xf0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00b      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <TIM_Base_SetConfig+0xf4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a1e      	ldr	r2, [pc, #120]	; (800269c <TIM_Base_SetConfig+0xf8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d003      	beq.n	800262e <TIM_Base_SetConfig+0x8a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <TIM_Base_SetConfig+0xfc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d108      	bne.n	8002640 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a08      	ldr	r2, [pc, #32]	; (8002688 <TIM_Base_SetConfig+0xe4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d103      	bne.n	8002674 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	615a      	str	r2, [r3, #20]
}
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40010000 	.word	0x40010000
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800
 8002694:	40000c00 	.word	0x40000c00
 8002698:	40014000 	.word	0x40014000
 800269c:	40014400 	.word	0x40014400
 80026a0:	40014800 	.word	0x40014800

080026a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e03f      	b.n	800275e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fcec 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2224      	movs	r2, #36	; 0x24
 80026fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800270e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f829 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027aa:	f023 030c 	bic.w	r3, r3, #12
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	68f9      	ldr	r1, [r7, #12]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	f040 818b 	bne.w	8002af0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4ac1      	ldr	r2, [pc, #772]	; (8002ae4 <UART_SetConfig+0x37c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d005      	beq.n	80027f0 <UART_SetConfig+0x88>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4abf      	ldr	r2, [pc, #764]	; (8002ae8 <UART_SetConfig+0x380>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f040 80bd 	bne.w	800296a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027f0:	f7ff fd08 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 80027f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	461d      	mov	r5, r3
 80027fa:	f04f 0600 	mov.w	r6, #0
 80027fe:	46a8      	mov	r8, r5
 8002800:	46b1      	mov	r9, r6
 8002802:	eb18 0308 	adds.w	r3, r8, r8
 8002806:	eb49 0409 	adc.w	r4, r9, r9
 800280a:	4698      	mov	r8, r3
 800280c:	46a1      	mov	r9, r4
 800280e:	eb18 0805 	adds.w	r8, r8, r5
 8002812:	eb49 0906 	adc.w	r9, r9, r6
 8002816:	f04f 0100 	mov.w	r1, #0
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800282a:	4688      	mov	r8, r1
 800282c:	4691      	mov	r9, r2
 800282e:	eb18 0005 	adds.w	r0, r8, r5
 8002832:	eb49 0106 	adc.w	r1, r9, r6
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	461d      	mov	r5, r3
 800283c:	f04f 0600 	mov.w	r6, #0
 8002840:	196b      	adds	r3, r5, r5
 8002842:	eb46 0406 	adc.w	r4, r6, r6
 8002846:	461a      	mov	r2, r3
 8002848:	4623      	mov	r3, r4
 800284a:	f7fd fd21 	bl	8000290 <__aeabi_uldivmod>
 800284e:	4603      	mov	r3, r0
 8002850:	460c      	mov	r4, r1
 8002852:	461a      	mov	r2, r3
 8002854:	4ba5      	ldr	r3, [pc, #660]	; (8002aec <UART_SetConfig+0x384>)
 8002856:	fba3 2302 	umull	r2, r3, r3, r2
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	461d      	mov	r5, r3
 8002864:	f04f 0600 	mov.w	r6, #0
 8002868:	46a9      	mov	r9, r5
 800286a:	46b2      	mov	sl, r6
 800286c:	eb19 0309 	adds.w	r3, r9, r9
 8002870:	eb4a 040a 	adc.w	r4, sl, sl
 8002874:	4699      	mov	r9, r3
 8002876:	46a2      	mov	sl, r4
 8002878:	eb19 0905 	adds.w	r9, r9, r5
 800287c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002880:	f04f 0100 	mov.w	r1, #0
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800288c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002894:	4689      	mov	r9, r1
 8002896:	4692      	mov	sl, r2
 8002898:	eb19 0005 	adds.w	r0, r9, r5
 800289c:	eb4a 0106 	adc.w	r1, sl, r6
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	461d      	mov	r5, r3
 80028a6:	f04f 0600 	mov.w	r6, #0
 80028aa:	196b      	adds	r3, r5, r5
 80028ac:	eb46 0406 	adc.w	r4, r6, r6
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	f7fd fcec 	bl	8000290 <__aeabi_uldivmod>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	461a      	mov	r2, r3
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <UART_SetConfig+0x384>)
 80028c0:	fba3 1302 	umull	r1, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	2164      	movs	r1, #100	; 0x64
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	4a86      	ldr	r2, [pc, #536]	; (8002aec <UART_SetConfig+0x384>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028e0:	4498      	add	r8, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	461d      	mov	r5, r3
 80028e6:	f04f 0600 	mov.w	r6, #0
 80028ea:	46a9      	mov	r9, r5
 80028ec:	46b2      	mov	sl, r6
 80028ee:	eb19 0309 	adds.w	r3, r9, r9
 80028f2:	eb4a 040a 	adc.w	r4, sl, sl
 80028f6:	4699      	mov	r9, r3
 80028f8:	46a2      	mov	sl, r4
 80028fa:	eb19 0905 	adds.w	r9, r9, r5
 80028fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800290e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002916:	4689      	mov	r9, r1
 8002918:	4692      	mov	sl, r2
 800291a:	eb19 0005 	adds.w	r0, r9, r5
 800291e:	eb4a 0106 	adc.w	r1, sl, r6
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	461d      	mov	r5, r3
 8002928:	f04f 0600 	mov.w	r6, #0
 800292c:	196b      	adds	r3, r5, r5
 800292e:	eb46 0406 	adc.w	r4, r6, r6
 8002932:	461a      	mov	r2, r3
 8002934:	4623      	mov	r3, r4
 8002936:	f7fd fcab 	bl	8000290 <__aeabi_uldivmod>
 800293a:	4603      	mov	r3, r0
 800293c:	460c      	mov	r4, r1
 800293e:	461a      	mov	r2, r3
 8002940:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <UART_SetConfig+0x384>)
 8002942:	fba3 1302 	umull	r1, r3, r3, r2
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2164      	movs	r1, #100	; 0x64
 800294a:	fb01 f303 	mul.w	r3, r1, r3
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	3332      	adds	r3, #50	; 0x32
 8002954:	4a65      	ldr	r2, [pc, #404]	; (8002aec <UART_SetConfig+0x384>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	f003 0207 	and.w	r2, r3, #7
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4442      	add	r2, r8
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e26f      	b.n	8002e4a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800296a:	f7ff fc37 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 800296e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	461d      	mov	r5, r3
 8002974:	f04f 0600 	mov.w	r6, #0
 8002978:	46a8      	mov	r8, r5
 800297a:	46b1      	mov	r9, r6
 800297c:	eb18 0308 	adds.w	r3, r8, r8
 8002980:	eb49 0409 	adc.w	r4, r9, r9
 8002984:	4698      	mov	r8, r3
 8002986:	46a1      	mov	r9, r4
 8002988:	eb18 0805 	adds.w	r8, r8, r5
 800298c:	eb49 0906 	adc.w	r9, r9, r6
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800299c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029a4:	4688      	mov	r8, r1
 80029a6:	4691      	mov	r9, r2
 80029a8:	eb18 0005 	adds.w	r0, r8, r5
 80029ac:	eb49 0106 	adc.w	r1, r9, r6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	461d      	mov	r5, r3
 80029b6:	f04f 0600 	mov.w	r6, #0
 80029ba:	196b      	adds	r3, r5, r5
 80029bc:	eb46 0406 	adc.w	r4, r6, r6
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	f7fd fc64 	bl	8000290 <__aeabi_uldivmod>
 80029c8:	4603      	mov	r3, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <UART_SetConfig+0x384>)
 80029d0:	fba3 2302 	umull	r2, r3, r3, r2
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	461d      	mov	r5, r3
 80029de:	f04f 0600 	mov.w	r6, #0
 80029e2:	46a9      	mov	r9, r5
 80029e4:	46b2      	mov	sl, r6
 80029e6:	eb19 0309 	adds.w	r3, r9, r9
 80029ea:	eb4a 040a 	adc.w	r4, sl, sl
 80029ee:	4699      	mov	r9, r3
 80029f0:	46a2      	mov	sl, r4
 80029f2:	eb19 0905 	adds.w	r9, r9, r5
 80029f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a0e:	4689      	mov	r9, r1
 8002a10:	4692      	mov	sl, r2
 8002a12:	eb19 0005 	adds.w	r0, r9, r5
 8002a16:	eb4a 0106 	adc.w	r1, sl, r6
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	461d      	mov	r5, r3
 8002a20:	f04f 0600 	mov.w	r6, #0
 8002a24:	196b      	adds	r3, r5, r5
 8002a26:	eb46 0406 	adc.w	r4, r6, r6
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4623      	mov	r3, r4
 8002a2e:	f7fd fc2f 	bl	8000290 <__aeabi_uldivmod>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <UART_SetConfig+0x384>)
 8002a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2164      	movs	r1, #100	; 0x64
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	4a27      	ldr	r2, [pc, #156]	; (8002aec <UART_SetConfig+0x384>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a5a:	4498      	add	r8, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	461d      	mov	r5, r3
 8002a60:	f04f 0600 	mov.w	r6, #0
 8002a64:	46a9      	mov	r9, r5
 8002a66:	46b2      	mov	sl, r6
 8002a68:	eb19 0309 	adds.w	r3, r9, r9
 8002a6c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a70:	4699      	mov	r9, r3
 8002a72:	46a2      	mov	sl, r4
 8002a74:	eb19 0905 	adds.w	r9, r9, r5
 8002a78:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a90:	4689      	mov	r9, r1
 8002a92:	4692      	mov	sl, r2
 8002a94:	eb19 0005 	adds.w	r0, r9, r5
 8002a98:	eb4a 0106 	adc.w	r1, sl, r6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	461d      	mov	r5, r3
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	196b      	adds	r3, r5, r5
 8002aa8:	eb46 0406 	adc.w	r4, r6, r6
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	f7fd fbee 	bl	8000290 <__aeabi_uldivmod>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	460c      	mov	r4, r1
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <UART_SetConfig+0x384>)
 8002abc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	2164      	movs	r1, #100	; 0x64
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	3332      	adds	r3, #50	; 0x32
 8002ace:	4a07      	ldr	r2, [pc, #28]	; (8002aec <UART_SetConfig+0x384>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	f003 0207 	and.w	r2, r3, #7
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4442      	add	r2, r8
 8002ae0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ae2:	e1b2      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4ad7      	ldr	r2, [pc, #860]	; (8002e54 <UART_SetConfig+0x6ec>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d005      	beq.n	8002b06 <UART_SetConfig+0x39e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4ad6      	ldr	r2, [pc, #856]	; (8002e58 <UART_SetConfig+0x6f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	f040 80d1 	bne.w	8002ca8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b06:	f7ff fb7d 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002b0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	469a      	mov	sl, r3
 8002b10:	f04f 0b00 	mov.w	fp, #0
 8002b14:	46d0      	mov	r8, sl
 8002b16:	46d9      	mov	r9, fp
 8002b18:	eb18 0308 	adds.w	r3, r8, r8
 8002b1c:	eb49 0409 	adc.w	r4, r9, r9
 8002b20:	4698      	mov	r8, r3
 8002b22:	46a1      	mov	r9, r4
 8002b24:	eb18 080a 	adds.w	r8, r8, sl
 8002b28:	eb49 090b 	adc.w	r9, r9, fp
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b40:	4688      	mov	r8, r1
 8002b42:	4691      	mov	r9, r2
 8002b44:	eb1a 0508 	adds.w	r5, sl, r8
 8002b48:	eb4b 0609 	adc.w	r6, fp, r9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f04f 0400 	mov.w	r4, #0
 8002b5e:	0094      	lsls	r4, r2, #2
 8002b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b64:	008b      	lsls	r3, r1, #2
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	4631      	mov	r1, r6
 8002b6e:	f7fd fb8f 	bl	8000290 <__aeabi_uldivmod>
 8002b72:	4603      	mov	r3, r0
 8002b74:	460c      	mov	r4, r1
 8002b76:	461a      	mov	r2, r3
 8002b78:	4bb8      	ldr	r3, [pc, #736]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	469b      	mov	fp, r3
 8002b88:	f04f 0c00 	mov.w	ip, #0
 8002b8c:	46d9      	mov	r9, fp
 8002b8e:	46e2      	mov	sl, ip
 8002b90:	eb19 0309 	adds.w	r3, r9, r9
 8002b94:	eb4a 040a 	adc.w	r4, sl, sl
 8002b98:	4699      	mov	r9, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	eb19 090b 	adds.w	r9, r9, fp
 8002ba0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb8:	4689      	mov	r9, r1
 8002bba:	4692      	mov	sl, r2
 8002bbc:	eb1b 0509 	adds.w	r5, fp, r9
 8002bc0:	eb4c 060a 	adc.w	r6, ip, sl
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f04f 0400 	mov.w	r4, #0
 8002bd6:	0094      	lsls	r4, r2, #2
 8002bd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bdc:	008b      	lsls	r3, r1, #2
 8002bde:	461a      	mov	r2, r3
 8002be0:	4623      	mov	r3, r4
 8002be2:	4628      	mov	r0, r5
 8002be4:	4631      	mov	r1, r6
 8002be6:	f7fd fb53 	bl	8000290 <__aeabi_uldivmod>
 8002bea:	4603      	mov	r3, r0
 8002bec:	460c      	mov	r4, r1
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b9a      	ldr	r3, [pc, #616]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	fb01 f303 	mul.w	r3, r1, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a95      	ldr	r2, [pc, #596]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4498      	add	r8, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	469b      	mov	fp, r3
 8002c16:	f04f 0c00 	mov.w	ip, #0
 8002c1a:	46d9      	mov	r9, fp
 8002c1c:	46e2      	mov	sl, ip
 8002c1e:	eb19 0309 	adds.w	r3, r9, r9
 8002c22:	eb4a 040a 	adc.w	r4, sl, sl
 8002c26:	4699      	mov	r9, r3
 8002c28:	46a2      	mov	sl, r4
 8002c2a:	eb19 090b 	adds.w	r9, r9, fp
 8002c2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c46:	4689      	mov	r9, r1
 8002c48:	4692      	mov	sl, r2
 8002c4a:	eb1b 0509 	adds.w	r5, fp, r9
 8002c4e:	eb4c 060a 	adc.w	r6, ip, sl
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	0094      	lsls	r4, r2, #2
 8002c66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c6a:	008b      	lsls	r3, r1, #2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4623      	mov	r3, r4
 8002c70:	4628      	mov	r0, r5
 8002c72:	4631      	mov	r1, r6
 8002c74:	f7fd fb0c 	bl	8000290 <__aeabi_uldivmod>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b77      	ldr	r3, [pc, #476]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a72      	ldr	r2, [pc, #456]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4442      	add	r2, r8
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e0d0      	b.n	8002e4a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ca8:	f7ff fa98 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002cac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	469a      	mov	sl, r3
 8002cb2:	f04f 0b00 	mov.w	fp, #0
 8002cb6:	46d0      	mov	r8, sl
 8002cb8:	46d9      	mov	r9, fp
 8002cba:	eb18 0308 	adds.w	r3, r8, r8
 8002cbe:	eb49 0409 	adc.w	r4, r9, r9
 8002cc2:	4698      	mov	r8, r3
 8002cc4:	46a1      	mov	r9, r4
 8002cc6:	eb18 080a 	adds.w	r8, r8, sl
 8002cca:	eb49 090b 	adc.w	r9, r9, fp
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cde:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ce2:	4688      	mov	r8, r1
 8002ce4:	4691      	mov	r9, r2
 8002ce6:	eb1a 0508 	adds.w	r5, sl, r8
 8002cea:	eb4b 0609 	adc.w	r6, fp, r9
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0094      	lsls	r4, r2, #2
 8002d02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	4631      	mov	r1, r6
 8002d10:	f7fd fabe 	bl	8000290 <__aeabi_uldivmod>
 8002d14:	4603      	mov	r3, r0
 8002d16:	460c      	mov	r4, r1
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	469b      	mov	fp, r3
 8002d2a:	f04f 0c00 	mov.w	ip, #0
 8002d2e:	46d9      	mov	r9, fp
 8002d30:	46e2      	mov	sl, ip
 8002d32:	eb19 0309 	adds.w	r3, r9, r9
 8002d36:	eb4a 040a 	adc.w	r4, sl, sl
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	eb19 090b 	adds.w	r9, r9, fp
 8002d42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d46:	f04f 0100 	mov.w	r1, #0
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d5a:	4689      	mov	r9, r1
 8002d5c:	4692      	mov	sl, r2
 8002d5e:	eb1b 0509 	adds.w	r5, fp, r9
 8002d62:	eb4c 060a 	adc.w	r6, ip, sl
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0094      	lsls	r4, r2, #2
 8002d7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7e:	008b      	lsls	r3, r1, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	4623      	mov	r3, r4
 8002d84:	4628      	mov	r0, r5
 8002d86:	4631      	mov	r1, r6
 8002d88:	f7fd fa82 	bl	8000290 <__aeabi_uldivmod>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b32      	ldr	r3, [pc, #200]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	; 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	3332      	adds	r3, #50	; 0x32
 8002da6:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db2:	4498      	add	r8, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	469b      	mov	fp, r3
 8002db8:	f04f 0c00 	mov.w	ip, #0
 8002dbc:	46d9      	mov	r9, fp
 8002dbe:	46e2      	mov	sl, ip
 8002dc0:	eb19 0309 	adds.w	r3, r9, r9
 8002dc4:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc8:	4699      	mov	r9, r3
 8002dca:	46a2      	mov	sl, r4
 8002dcc:	eb19 090b 	adds.w	r9, r9, fp
 8002dd0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002de4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de8:	4689      	mov	r9, r1
 8002dea:	4692      	mov	sl, r2
 8002dec:	eb1b 0509 	adds.w	r5, fp, r9
 8002df0:	eb4c 060a 	adc.w	r6, ip, sl
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f04f 0400 	mov.w	r4, #0
 8002e06:	0094      	lsls	r4, r2, #2
 8002e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e0c:	008b      	lsls	r3, r1, #2
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4623      	mov	r3, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	4631      	mov	r1, r6
 8002e16:	f7fd fa3b 	bl	8000290 <__aeabi_uldivmod>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e22:	fba3 1302 	umull	r1, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2164      	movs	r1, #100	; 0x64
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	; 0x32
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <UART_SetConfig+0x6f4>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4442      	add	r2, r8
 8002e46:	609a      	str	r2, [r3, #8]
}
 8002e48:	e7ff      	b.n	8002e4a <UART_SetConfig+0x6e2>
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e54:	40011000 	.word	0x40011000
 8002e58:	40011400 	.word	0x40011400
 8002e5c:	51eb851f 	.word	0x51eb851f

08002e60 <__errno>:
 8002e60:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <__errno+0x8>)
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	2000000c 	.word	0x2000000c

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	4e0d      	ldr	r6, [pc, #52]	; (8002ea4 <__libc_init_array+0x38>)
 8002e70:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e72:	1ba4      	subs	r4, r4, r6
 8002e74:	10a4      	asrs	r4, r4, #2
 8002e76:	2500      	movs	r5, #0
 8002e78:	42a5      	cmp	r5, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	4e0b      	ldr	r6, [pc, #44]	; (8002eac <__libc_init_array+0x40>)
 8002e7e:	4c0c      	ldr	r4, [pc, #48]	; (8002eb0 <__libc_init_array+0x44>)
 8002e80:	f001 f920 	bl	80040c4 <_init>
 8002e84:	1ba4      	subs	r4, r4, r6
 8002e86:	10a4      	asrs	r4, r4, #2
 8002e88:	2500      	movs	r5, #0
 8002e8a:	42a5      	cmp	r5, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e94:	4798      	blx	r3
 8002e96:	3501      	adds	r5, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9e:	4798      	blx	r3
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	080042d8 	.word	0x080042d8
 8002ea8:	080042d8 	.word	0x080042d8
 8002eac:	080042d8 	.word	0x080042d8
 8002eb0:	080042dc 	.word	0x080042dc

08002eb4 <memset>:
 8002eb4:	4402      	add	r2, r0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <sniprintf>:
 8002ec4:	b40c      	push	{r2, r3}
 8002ec6:	b530      	push	{r4, r5, lr}
 8002ec8:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <sniprintf+0x64>)
 8002eca:	1e0c      	subs	r4, r1, #0
 8002ecc:	b09d      	sub	sp, #116	; 0x74
 8002ece:	681d      	ldr	r5, [r3, #0]
 8002ed0:	da08      	bge.n	8002ee4 <sniprintf+0x20>
 8002ed2:	238b      	movs	r3, #139	; 0x8b
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eda:	b01d      	add	sp, #116	; 0x74
 8002edc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ee0:	b002      	add	sp, #8
 8002ee2:	4770      	bx	lr
 8002ee4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002ee8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002eec:	bf14      	ite	ne
 8002eee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002ef2:	4623      	moveq	r3, r4
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	9307      	str	r3, [sp, #28]
 8002ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002efc:	9002      	str	r0, [sp, #8]
 8002efe:	9006      	str	r0, [sp, #24]
 8002f00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f06:	ab21      	add	r3, sp, #132	; 0x84
 8002f08:	a902      	add	r1, sp, #8
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	f000 f893 	bl	8003038 <_svfiprintf_r>
 8002f12:	1c43      	adds	r3, r0, #1
 8002f14:	bfbc      	itt	lt
 8002f16:	238b      	movlt	r3, #139	; 0x8b
 8002f18:	602b      	strlt	r3, [r5, #0]
 8002f1a:	2c00      	cmp	r4, #0
 8002f1c:	d0dd      	beq.n	8002eda <sniprintf+0x16>
 8002f1e:	9b02      	ldr	r3, [sp, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e7d9      	b.n	8002eda <sniprintf+0x16>
 8002f26:	bf00      	nop
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <siscanf>:
 8002f2c:	b40e      	push	{r1, r2, r3}
 8002f2e:	b530      	push	{r4, r5, lr}
 8002f30:	b09c      	sub	sp, #112	; 0x70
 8002f32:	ac1f      	add	r4, sp, #124	; 0x7c
 8002f34:	f44f 7201 	mov.w	r2, #516	; 0x204
 8002f38:	f854 5b04 	ldr.w	r5, [r4], #4
 8002f3c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002f40:	9002      	str	r0, [sp, #8]
 8002f42:	9006      	str	r0, [sp, #24]
 8002f44:	f7fd f94c 	bl	80001e0 <strlen>
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <siscanf+0x4c>)
 8002f4a:	9003      	str	r0, [sp, #12]
 8002f4c:	9007      	str	r0, [sp, #28]
 8002f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f50:	480a      	ldr	r0, [pc, #40]	; (8002f7c <siscanf+0x50>)
 8002f52:	9401      	str	r4, [sp, #4]
 8002f54:	2300      	movs	r3, #0
 8002f56:	930f      	str	r3, [sp, #60]	; 0x3c
 8002f58:	9314      	str	r3, [sp, #80]	; 0x50
 8002f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4623      	mov	r3, r4
 8002f66:	a902      	add	r1, sp, #8
 8002f68:	6800      	ldr	r0, [r0, #0]
 8002f6a:	f000 f9b7 	bl	80032dc <__ssvfiscanf_r>
 8002f6e:	b01c      	add	sp, #112	; 0x70
 8002f70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002f74:	b003      	add	sp, #12
 8002f76:	4770      	bx	lr
 8002f78:	08002f81 	.word	0x08002f81
 8002f7c:	2000000c 	.word	0x2000000c

08002f80 <__seofread>:
 8002f80:	2000      	movs	r0, #0
 8002f82:	4770      	bx	lr

08002f84 <__ssputs_r>:
 8002f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	688e      	ldr	r6, [r1, #8]
 8002f8a:	429e      	cmp	r6, r3
 8002f8c:	4682      	mov	sl, r0
 8002f8e:	460c      	mov	r4, r1
 8002f90:	4690      	mov	r8, r2
 8002f92:	4699      	mov	r9, r3
 8002f94:	d837      	bhi.n	8003006 <__ssputs_r+0x82>
 8002f96:	898a      	ldrh	r2, [r1, #12]
 8002f98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f9c:	d031      	beq.n	8003002 <__ssputs_r+0x7e>
 8002f9e:	6825      	ldr	r5, [r4, #0]
 8002fa0:	6909      	ldr	r1, [r1, #16]
 8002fa2:	1a6f      	subs	r7, r5, r1
 8002fa4:	6965      	ldr	r5, [r4, #20]
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fac:	fb95 f5f3 	sdiv	r5, r5, r3
 8002fb0:	f109 0301 	add.w	r3, r9, #1
 8002fb4:	443b      	add	r3, r7
 8002fb6:	429d      	cmp	r5, r3
 8002fb8:	bf38      	it	cc
 8002fba:	461d      	movcc	r5, r3
 8002fbc:	0553      	lsls	r3, r2, #21
 8002fbe:	d530      	bpl.n	8003022 <__ssputs_r+0x9e>
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f000 ffd7 	bl	8003f74 <_malloc_r>
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	b950      	cbnz	r0, 8002fe0 <__ssputs_r+0x5c>
 8002fca:	230c      	movs	r3, #12
 8002fcc:	f8ca 3000 	str.w	r3, [sl]
 8002fd0:	89a3      	ldrh	r3, [r4, #12]
 8002fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd6:	81a3      	strh	r3, [r4, #12]
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe0:	463a      	mov	r2, r7
 8002fe2:	6921      	ldr	r1, [r4, #16]
 8002fe4:	f000 ff54 	bl	8003e90 <memcpy>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff2:	81a3      	strh	r3, [r4, #12]
 8002ff4:	6126      	str	r6, [r4, #16]
 8002ff6:	6165      	str	r5, [r4, #20]
 8002ff8:	443e      	add	r6, r7
 8002ffa:	1bed      	subs	r5, r5, r7
 8002ffc:	6026      	str	r6, [r4, #0]
 8002ffe:	60a5      	str	r5, [r4, #8]
 8003000:	464e      	mov	r6, r9
 8003002:	454e      	cmp	r6, r9
 8003004:	d900      	bls.n	8003008 <__ssputs_r+0x84>
 8003006:	464e      	mov	r6, r9
 8003008:	4632      	mov	r2, r6
 800300a:	4641      	mov	r1, r8
 800300c:	6820      	ldr	r0, [r4, #0]
 800300e:	f000 ff4a 	bl	8003ea6 <memmove>
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	1b9b      	subs	r3, r3, r6
 8003016:	60a3      	str	r3, [r4, #8]
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	441e      	add	r6, r3
 800301c:	6026      	str	r6, [r4, #0]
 800301e:	2000      	movs	r0, #0
 8003020:	e7dc      	b.n	8002fdc <__ssputs_r+0x58>
 8003022:	462a      	mov	r2, r5
 8003024:	f001 f800 	bl	8004028 <_realloc_r>
 8003028:	4606      	mov	r6, r0
 800302a:	2800      	cmp	r0, #0
 800302c:	d1e2      	bne.n	8002ff4 <__ssputs_r+0x70>
 800302e:	6921      	ldr	r1, [r4, #16]
 8003030:	4650      	mov	r0, sl
 8003032:	f000 ff51 	bl	8003ed8 <_free_r>
 8003036:	e7c8      	b.n	8002fca <__ssputs_r+0x46>

08003038 <_svfiprintf_r>:
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	461d      	mov	r5, r3
 800303e:	898b      	ldrh	r3, [r1, #12]
 8003040:	061f      	lsls	r7, r3, #24
 8003042:	b09d      	sub	sp, #116	; 0x74
 8003044:	4680      	mov	r8, r0
 8003046:	460c      	mov	r4, r1
 8003048:	4616      	mov	r6, r2
 800304a:	d50f      	bpl.n	800306c <_svfiprintf_r+0x34>
 800304c:	690b      	ldr	r3, [r1, #16]
 800304e:	b96b      	cbnz	r3, 800306c <_svfiprintf_r+0x34>
 8003050:	2140      	movs	r1, #64	; 0x40
 8003052:	f000 ff8f 	bl	8003f74 <_malloc_r>
 8003056:	6020      	str	r0, [r4, #0]
 8003058:	6120      	str	r0, [r4, #16]
 800305a:	b928      	cbnz	r0, 8003068 <_svfiprintf_r+0x30>
 800305c:	230c      	movs	r3, #12
 800305e:	f8c8 3000 	str.w	r3, [r8]
 8003062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003066:	e0c8      	b.n	80031fa <_svfiprintf_r+0x1c2>
 8003068:	2340      	movs	r3, #64	; 0x40
 800306a:	6163      	str	r3, [r4, #20]
 800306c:	2300      	movs	r3, #0
 800306e:	9309      	str	r3, [sp, #36]	; 0x24
 8003070:	2320      	movs	r3, #32
 8003072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003076:	2330      	movs	r3, #48	; 0x30
 8003078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800307c:	9503      	str	r5, [sp, #12]
 800307e:	f04f 0b01 	mov.w	fp, #1
 8003082:	4637      	mov	r7, r6
 8003084:	463d      	mov	r5, r7
 8003086:	f815 3b01 	ldrb.w	r3, [r5], #1
 800308a:	b10b      	cbz	r3, 8003090 <_svfiprintf_r+0x58>
 800308c:	2b25      	cmp	r3, #37	; 0x25
 800308e:	d13e      	bne.n	800310e <_svfiprintf_r+0xd6>
 8003090:	ebb7 0a06 	subs.w	sl, r7, r6
 8003094:	d00b      	beq.n	80030ae <_svfiprintf_r+0x76>
 8003096:	4653      	mov	r3, sl
 8003098:	4632      	mov	r2, r6
 800309a:	4621      	mov	r1, r4
 800309c:	4640      	mov	r0, r8
 800309e:	f7ff ff71 	bl	8002f84 <__ssputs_r>
 80030a2:	3001      	adds	r0, #1
 80030a4:	f000 80a4 	beq.w	80031f0 <_svfiprintf_r+0x1b8>
 80030a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030aa:	4453      	add	r3, sl
 80030ac:	9309      	str	r3, [sp, #36]	; 0x24
 80030ae:	783b      	ldrb	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 809d 	beq.w	80031f0 <_svfiprintf_r+0x1b8>
 80030b6:	2300      	movs	r3, #0
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030c0:	9304      	str	r3, [sp, #16]
 80030c2:	9307      	str	r3, [sp, #28]
 80030c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030c8:	931a      	str	r3, [sp, #104]	; 0x68
 80030ca:	462f      	mov	r7, r5
 80030cc:	2205      	movs	r2, #5
 80030ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80030d2:	4850      	ldr	r0, [pc, #320]	; (8003214 <_svfiprintf_r+0x1dc>)
 80030d4:	f7fd f88c 	bl	80001f0 <memchr>
 80030d8:	9b04      	ldr	r3, [sp, #16]
 80030da:	b9d0      	cbnz	r0, 8003112 <_svfiprintf_r+0xda>
 80030dc:	06d9      	lsls	r1, r3, #27
 80030de:	bf44      	itt	mi
 80030e0:	2220      	movmi	r2, #32
 80030e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030e6:	071a      	lsls	r2, r3, #28
 80030e8:	bf44      	itt	mi
 80030ea:	222b      	movmi	r2, #43	; 0x2b
 80030ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80030f0:	782a      	ldrb	r2, [r5, #0]
 80030f2:	2a2a      	cmp	r2, #42	; 0x2a
 80030f4:	d015      	beq.n	8003122 <_svfiprintf_r+0xea>
 80030f6:	9a07      	ldr	r2, [sp, #28]
 80030f8:	462f      	mov	r7, r5
 80030fa:	2000      	movs	r0, #0
 80030fc:	250a      	movs	r5, #10
 80030fe:	4639      	mov	r1, r7
 8003100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003104:	3b30      	subs	r3, #48	; 0x30
 8003106:	2b09      	cmp	r3, #9
 8003108:	d94d      	bls.n	80031a6 <_svfiprintf_r+0x16e>
 800310a:	b1b8      	cbz	r0, 800313c <_svfiprintf_r+0x104>
 800310c:	e00f      	b.n	800312e <_svfiprintf_r+0xf6>
 800310e:	462f      	mov	r7, r5
 8003110:	e7b8      	b.n	8003084 <_svfiprintf_r+0x4c>
 8003112:	4a40      	ldr	r2, [pc, #256]	; (8003214 <_svfiprintf_r+0x1dc>)
 8003114:	1a80      	subs	r0, r0, r2
 8003116:	fa0b f000 	lsl.w	r0, fp, r0
 800311a:	4318      	orrs	r0, r3
 800311c:	9004      	str	r0, [sp, #16]
 800311e:	463d      	mov	r5, r7
 8003120:	e7d3      	b.n	80030ca <_svfiprintf_r+0x92>
 8003122:	9a03      	ldr	r2, [sp, #12]
 8003124:	1d11      	adds	r1, r2, #4
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	9103      	str	r1, [sp, #12]
 800312a:	2a00      	cmp	r2, #0
 800312c:	db01      	blt.n	8003132 <_svfiprintf_r+0xfa>
 800312e:	9207      	str	r2, [sp, #28]
 8003130:	e004      	b.n	800313c <_svfiprintf_r+0x104>
 8003132:	4252      	negs	r2, r2
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	9207      	str	r2, [sp, #28]
 800313a:	9304      	str	r3, [sp, #16]
 800313c:	783b      	ldrb	r3, [r7, #0]
 800313e:	2b2e      	cmp	r3, #46	; 0x2e
 8003140:	d10c      	bne.n	800315c <_svfiprintf_r+0x124>
 8003142:	787b      	ldrb	r3, [r7, #1]
 8003144:	2b2a      	cmp	r3, #42	; 0x2a
 8003146:	d133      	bne.n	80031b0 <_svfiprintf_r+0x178>
 8003148:	9b03      	ldr	r3, [sp, #12]
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	9203      	str	r2, [sp, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	bfb8      	it	lt
 8003154:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003158:	3702      	adds	r7, #2
 800315a:	9305      	str	r3, [sp, #20]
 800315c:	4d2e      	ldr	r5, [pc, #184]	; (8003218 <_svfiprintf_r+0x1e0>)
 800315e:	7839      	ldrb	r1, [r7, #0]
 8003160:	2203      	movs	r2, #3
 8003162:	4628      	mov	r0, r5
 8003164:	f7fd f844 	bl	80001f0 <memchr>
 8003168:	b138      	cbz	r0, 800317a <_svfiprintf_r+0x142>
 800316a:	2340      	movs	r3, #64	; 0x40
 800316c:	1b40      	subs	r0, r0, r5
 800316e:	fa03 f000 	lsl.w	r0, r3, r0
 8003172:	9b04      	ldr	r3, [sp, #16]
 8003174:	4303      	orrs	r3, r0
 8003176:	3701      	adds	r7, #1
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	7839      	ldrb	r1, [r7, #0]
 800317c:	4827      	ldr	r0, [pc, #156]	; (800321c <_svfiprintf_r+0x1e4>)
 800317e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003182:	2206      	movs	r2, #6
 8003184:	1c7e      	adds	r6, r7, #1
 8003186:	f7fd f833 	bl	80001f0 <memchr>
 800318a:	2800      	cmp	r0, #0
 800318c:	d038      	beq.n	8003200 <_svfiprintf_r+0x1c8>
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <_svfiprintf_r+0x1e8>)
 8003190:	bb13      	cbnz	r3, 80031d8 <_svfiprintf_r+0x1a0>
 8003192:	9b03      	ldr	r3, [sp, #12]
 8003194:	3307      	adds	r3, #7
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	3308      	adds	r3, #8
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031a0:	444b      	add	r3, r9
 80031a2:	9309      	str	r3, [sp, #36]	; 0x24
 80031a4:	e76d      	b.n	8003082 <_svfiprintf_r+0x4a>
 80031a6:	fb05 3202 	mla	r2, r5, r2, r3
 80031aa:	2001      	movs	r0, #1
 80031ac:	460f      	mov	r7, r1
 80031ae:	e7a6      	b.n	80030fe <_svfiprintf_r+0xc6>
 80031b0:	2300      	movs	r3, #0
 80031b2:	3701      	adds	r7, #1
 80031b4:	9305      	str	r3, [sp, #20]
 80031b6:	4619      	mov	r1, r3
 80031b8:	250a      	movs	r5, #10
 80031ba:	4638      	mov	r0, r7
 80031bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031c0:	3a30      	subs	r2, #48	; 0x30
 80031c2:	2a09      	cmp	r2, #9
 80031c4:	d903      	bls.n	80031ce <_svfiprintf_r+0x196>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0c8      	beq.n	800315c <_svfiprintf_r+0x124>
 80031ca:	9105      	str	r1, [sp, #20]
 80031cc:	e7c6      	b.n	800315c <_svfiprintf_r+0x124>
 80031ce:	fb05 2101 	mla	r1, r5, r1, r2
 80031d2:	2301      	movs	r3, #1
 80031d4:	4607      	mov	r7, r0
 80031d6:	e7f0      	b.n	80031ba <_svfiprintf_r+0x182>
 80031d8:	ab03      	add	r3, sp, #12
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	4622      	mov	r2, r4
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <_svfiprintf_r+0x1ec>)
 80031e0:	a904      	add	r1, sp, #16
 80031e2:	4640      	mov	r0, r8
 80031e4:	f3af 8000 	nop.w
 80031e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80031ec:	4681      	mov	r9, r0
 80031ee:	d1d6      	bne.n	800319e <_svfiprintf_r+0x166>
 80031f0:	89a3      	ldrh	r3, [r4, #12]
 80031f2:	065b      	lsls	r3, r3, #25
 80031f4:	f53f af35 	bmi.w	8003062 <_svfiprintf_r+0x2a>
 80031f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031fa:	b01d      	add	sp, #116	; 0x74
 80031fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003200:	ab03      	add	r3, sp, #12
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4622      	mov	r2, r4
 8003206:	4b07      	ldr	r3, [pc, #28]	; (8003224 <_svfiprintf_r+0x1ec>)
 8003208:	a904      	add	r1, sp, #16
 800320a:	4640      	mov	r0, r8
 800320c:	f000 fa2c 	bl	8003668 <_printf_i>
 8003210:	e7ea      	b.n	80031e8 <_svfiprintf_r+0x1b0>
 8003212:	bf00      	nop
 8003214:	08004114 	.word	0x08004114
 8003218:	0800411a 	.word	0x0800411a
 800321c:	0800411e 	.word	0x0800411e
 8003220:	00000000 	.word	0x00000000
 8003224:	08002f85 	.word	0x08002f85

08003228 <_sungetc_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	1c4b      	adds	r3, r1, #1
 800322c:	4614      	mov	r4, r2
 800322e:	d103      	bne.n	8003238 <_sungetc_r+0x10>
 8003230:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003234:	4628      	mov	r0, r5
 8003236:	bd38      	pop	{r3, r4, r5, pc}
 8003238:	8993      	ldrh	r3, [r2, #12]
 800323a:	f023 0320 	bic.w	r3, r3, #32
 800323e:	8193      	strh	r3, [r2, #12]
 8003240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003242:	6852      	ldr	r2, [r2, #4]
 8003244:	b2cd      	uxtb	r5, r1
 8003246:	b18b      	cbz	r3, 800326c <_sungetc_r+0x44>
 8003248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800324a:	4293      	cmp	r3, r2
 800324c:	dd08      	ble.n	8003260 <_sungetc_r+0x38>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	6022      	str	r2, [r4, #0]
 8003254:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003258:	6863      	ldr	r3, [r4, #4]
 800325a:	3301      	adds	r3, #1
 800325c:	6063      	str	r3, [r4, #4]
 800325e:	e7e9      	b.n	8003234 <_sungetc_r+0xc>
 8003260:	4621      	mov	r1, r4
 8003262:	f000 fdb7 	bl	8003dd4 <__submore>
 8003266:	2800      	cmp	r0, #0
 8003268:	d0f1      	beq.n	800324e <_sungetc_r+0x26>
 800326a:	e7e1      	b.n	8003230 <_sungetc_r+0x8>
 800326c:	6921      	ldr	r1, [r4, #16]
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	b151      	cbz	r1, 8003288 <_sungetc_r+0x60>
 8003272:	4299      	cmp	r1, r3
 8003274:	d208      	bcs.n	8003288 <_sungetc_r+0x60>
 8003276:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800327a:	42a9      	cmp	r1, r5
 800327c:	d104      	bne.n	8003288 <_sungetc_r+0x60>
 800327e:	3b01      	subs	r3, #1
 8003280:	3201      	adds	r2, #1
 8003282:	6023      	str	r3, [r4, #0]
 8003284:	6062      	str	r2, [r4, #4]
 8003286:	e7d5      	b.n	8003234 <_sungetc_r+0xc>
 8003288:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800328c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003290:	6363      	str	r3, [r4, #52]	; 0x34
 8003292:	2303      	movs	r3, #3
 8003294:	63a3      	str	r3, [r4, #56]	; 0x38
 8003296:	4623      	mov	r3, r4
 8003298:	f803 5f46 	strb.w	r5, [r3, #70]!
 800329c:	6023      	str	r3, [r4, #0]
 800329e:	2301      	movs	r3, #1
 80032a0:	e7dc      	b.n	800325c <_sungetc_r+0x34>

080032a2 <__ssrefill_r>:
 80032a2:	b510      	push	{r4, lr}
 80032a4:	460c      	mov	r4, r1
 80032a6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80032a8:	b169      	cbz	r1, 80032c6 <__ssrefill_r+0x24>
 80032aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ae:	4299      	cmp	r1, r3
 80032b0:	d001      	beq.n	80032b6 <__ssrefill_r+0x14>
 80032b2:	f000 fe11 	bl	8003ed8 <_free_r>
 80032b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032b8:	6063      	str	r3, [r4, #4]
 80032ba:	2000      	movs	r0, #0
 80032bc:	6360      	str	r0, [r4, #52]	; 0x34
 80032be:	b113      	cbz	r3, 80032c6 <__ssrefill_r+0x24>
 80032c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	bd10      	pop	{r4, pc}
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	2300      	movs	r3, #0
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f043 0320 	orr.w	r3, r3, #32
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032da:	e7f3      	b.n	80032c4 <__ssrefill_r+0x22>

080032dc <__ssvfiscanf_r>:
 80032dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80032e4:	460c      	mov	r4, r1
 80032e6:	2100      	movs	r1, #0
 80032e8:	9144      	str	r1, [sp, #272]	; 0x110
 80032ea:	9145      	str	r1, [sp, #276]	; 0x114
 80032ec:	499f      	ldr	r1, [pc, #636]	; (800356c <__ssvfiscanf_r+0x290>)
 80032ee:	91a0      	str	r1, [sp, #640]	; 0x280
 80032f0:	f10d 0804 	add.w	r8, sp, #4
 80032f4:	499e      	ldr	r1, [pc, #632]	; (8003570 <__ssvfiscanf_r+0x294>)
 80032f6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8003574 <__ssvfiscanf_r+0x298>
 80032fa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80032fe:	4606      	mov	r6, r0
 8003300:	4692      	mov	sl, r2
 8003302:	91a1      	str	r1, [sp, #644]	; 0x284
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	270a      	movs	r7, #10
 8003308:	f89a 3000 	ldrb.w	r3, [sl]
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 812a 	beq.w	8003566 <__ssvfiscanf_r+0x28a>
 8003312:	4655      	mov	r5, sl
 8003314:	f000 fd9c 	bl	8003e50 <__locale_ctype_ptr>
 8003318:	f815 bb01 	ldrb.w	fp, [r5], #1
 800331c:	4458      	add	r0, fp
 800331e:	7843      	ldrb	r3, [r0, #1]
 8003320:	f013 0308 	ands.w	r3, r3, #8
 8003324:	d01c      	beq.n	8003360 <__ssvfiscanf_r+0x84>
 8003326:	6863      	ldr	r3, [r4, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dd12      	ble.n	8003352 <__ssvfiscanf_r+0x76>
 800332c:	f000 fd90 	bl	8003e50 <__locale_ctype_ptr>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	4410      	add	r0, r2
 8003336:	7842      	ldrb	r2, [r0, #1]
 8003338:	0712      	lsls	r2, r2, #28
 800333a:	d401      	bmi.n	8003340 <__ssvfiscanf_r+0x64>
 800333c:	46aa      	mov	sl, r5
 800333e:	e7e3      	b.n	8003308 <__ssvfiscanf_r+0x2c>
 8003340:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003342:	3201      	adds	r2, #1
 8003344:	9245      	str	r2, [sp, #276]	; 0x114
 8003346:	6862      	ldr	r2, [r4, #4]
 8003348:	3301      	adds	r3, #1
 800334a:	3a01      	subs	r2, #1
 800334c:	6062      	str	r2, [r4, #4]
 800334e:	6023      	str	r3, [r4, #0]
 8003350:	e7e9      	b.n	8003326 <__ssvfiscanf_r+0x4a>
 8003352:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003354:	4621      	mov	r1, r4
 8003356:	4630      	mov	r0, r6
 8003358:	4798      	blx	r3
 800335a:	2800      	cmp	r0, #0
 800335c:	d0e6      	beq.n	800332c <__ssvfiscanf_r+0x50>
 800335e:	e7ed      	b.n	800333c <__ssvfiscanf_r+0x60>
 8003360:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003364:	f040 8082 	bne.w	800346c <__ssvfiscanf_r+0x190>
 8003368:	9343      	str	r3, [sp, #268]	; 0x10c
 800336a:	9341      	str	r3, [sp, #260]	; 0x104
 800336c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003370:	2b2a      	cmp	r3, #42	; 0x2a
 8003372:	d103      	bne.n	800337c <__ssvfiscanf_r+0xa0>
 8003374:	2310      	movs	r3, #16
 8003376:	9341      	str	r3, [sp, #260]	; 0x104
 8003378:	f10a 0502 	add.w	r5, sl, #2
 800337c:	46aa      	mov	sl, r5
 800337e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003382:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8003386:	2a09      	cmp	r2, #9
 8003388:	d922      	bls.n	80033d0 <__ssvfiscanf_r+0xf4>
 800338a:	2203      	movs	r2, #3
 800338c:	4879      	ldr	r0, [pc, #484]	; (8003574 <__ssvfiscanf_r+0x298>)
 800338e:	f7fc ff2f 	bl	80001f0 <memchr>
 8003392:	b138      	cbz	r0, 80033a4 <__ssvfiscanf_r+0xc8>
 8003394:	eba0 0309 	sub.w	r3, r0, r9
 8003398:	2001      	movs	r0, #1
 800339a:	4098      	lsls	r0, r3
 800339c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800339e:	4318      	orrs	r0, r3
 80033a0:	9041      	str	r0, [sp, #260]	; 0x104
 80033a2:	46aa      	mov	sl, r5
 80033a4:	f89a 3000 	ldrb.w	r3, [sl]
 80033a8:	2b67      	cmp	r3, #103	; 0x67
 80033aa:	f10a 0501 	add.w	r5, sl, #1
 80033ae:	d82b      	bhi.n	8003408 <__ssvfiscanf_r+0x12c>
 80033b0:	2b65      	cmp	r3, #101	; 0x65
 80033b2:	f080 809f 	bcs.w	80034f4 <__ssvfiscanf_r+0x218>
 80033b6:	2b47      	cmp	r3, #71	; 0x47
 80033b8:	d810      	bhi.n	80033dc <__ssvfiscanf_r+0x100>
 80033ba:	2b45      	cmp	r3, #69	; 0x45
 80033bc:	f080 809a 	bcs.w	80034f4 <__ssvfiscanf_r+0x218>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d06c      	beq.n	800349e <__ssvfiscanf_r+0x1c2>
 80033c4:	2b25      	cmp	r3, #37	; 0x25
 80033c6:	d051      	beq.n	800346c <__ssvfiscanf_r+0x190>
 80033c8:	2303      	movs	r3, #3
 80033ca:	9347      	str	r3, [sp, #284]	; 0x11c
 80033cc:	9742      	str	r7, [sp, #264]	; 0x108
 80033ce:	e027      	b.n	8003420 <__ssvfiscanf_r+0x144>
 80033d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80033d2:	fb07 1303 	mla	r3, r7, r3, r1
 80033d6:	3b30      	subs	r3, #48	; 0x30
 80033d8:	9343      	str	r3, [sp, #268]	; 0x10c
 80033da:	e7cf      	b.n	800337c <__ssvfiscanf_r+0xa0>
 80033dc:	2b5b      	cmp	r3, #91	; 0x5b
 80033de:	d06a      	beq.n	80034b6 <__ssvfiscanf_r+0x1da>
 80033e0:	d80c      	bhi.n	80033fc <__ssvfiscanf_r+0x120>
 80033e2:	2b58      	cmp	r3, #88	; 0x58
 80033e4:	d1f0      	bne.n	80033c8 <__ssvfiscanf_r+0xec>
 80033e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80033e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ec:	9241      	str	r2, [sp, #260]	; 0x104
 80033ee:	2210      	movs	r2, #16
 80033f0:	9242      	str	r2, [sp, #264]	; 0x108
 80033f2:	2b6e      	cmp	r3, #110	; 0x6e
 80033f4:	bf8c      	ite	hi
 80033f6:	2304      	movhi	r3, #4
 80033f8:	2303      	movls	r3, #3
 80033fa:	e010      	b.n	800341e <__ssvfiscanf_r+0x142>
 80033fc:	2b63      	cmp	r3, #99	; 0x63
 80033fe:	d065      	beq.n	80034cc <__ssvfiscanf_r+0x1f0>
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d1e1      	bne.n	80033c8 <__ssvfiscanf_r+0xec>
 8003404:	9742      	str	r7, [sp, #264]	; 0x108
 8003406:	e7f4      	b.n	80033f2 <__ssvfiscanf_r+0x116>
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d04b      	beq.n	80034a4 <__ssvfiscanf_r+0x1c8>
 800340c:	d826      	bhi.n	800345c <__ssvfiscanf_r+0x180>
 800340e:	2b6e      	cmp	r3, #110	; 0x6e
 8003410:	d062      	beq.n	80034d8 <__ssvfiscanf_r+0x1fc>
 8003412:	d84c      	bhi.n	80034ae <__ssvfiscanf_r+0x1d2>
 8003414:	2b69      	cmp	r3, #105	; 0x69
 8003416:	d1d7      	bne.n	80033c8 <__ssvfiscanf_r+0xec>
 8003418:	2300      	movs	r3, #0
 800341a:	9342      	str	r3, [sp, #264]	; 0x108
 800341c:	2303      	movs	r3, #3
 800341e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003420:	6863      	ldr	r3, [r4, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	dd68      	ble.n	80034f8 <__ssvfiscanf_r+0x21c>
 8003426:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003428:	0659      	lsls	r1, r3, #25
 800342a:	d407      	bmi.n	800343c <__ssvfiscanf_r+0x160>
 800342c:	f000 fd10 	bl	8003e50 <__locale_ctype_ptr>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4410      	add	r0, r2
 8003436:	7842      	ldrb	r2, [r0, #1]
 8003438:	0712      	lsls	r2, r2, #28
 800343a:	d464      	bmi.n	8003506 <__ssvfiscanf_r+0x22a>
 800343c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800343e:	2b02      	cmp	r3, #2
 8003440:	dc73      	bgt.n	800352a <__ssvfiscanf_r+0x24e>
 8003442:	466b      	mov	r3, sp
 8003444:	4622      	mov	r2, r4
 8003446:	a941      	add	r1, sp, #260	; 0x104
 8003448:	4630      	mov	r0, r6
 800344a:	f000 fa1f 	bl	800388c <_scanf_chars>
 800344e:	2801      	cmp	r0, #1
 8003450:	f000 8089 	beq.w	8003566 <__ssvfiscanf_r+0x28a>
 8003454:	2802      	cmp	r0, #2
 8003456:	f47f af71 	bne.w	800333c <__ssvfiscanf_r+0x60>
 800345a:	e01d      	b.n	8003498 <__ssvfiscanf_r+0x1bc>
 800345c:	2b75      	cmp	r3, #117	; 0x75
 800345e:	d0d1      	beq.n	8003404 <__ssvfiscanf_r+0x128>
 8003460:	2b78      	cmp	r3, #120	; 0x78
 8003462:	d0c0      	beq.n	80033e6 <__ssvfiscanf_r+0x10a>
 8003464:	2b73      	cmp	r3, #115	; 0x73
 8003466:	d1af      	bne.n	80033c8 <__ssvfiscanf_r+0xec>
 8003468:	2302      	movs	r3, #2
 800346a:	e7d8      	b.n	800341e <__ssvfiscanf_r+0x142>
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	dd0c      	ble.n	800348c <__ssvfiscanf_r+0x1b0>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	455a      	cmp	r2, fp
 8003478:	d175      	bne.n	8003566 <__ssvfiscanf_r+0x28a>
 800347a:	3301      	adds	r3, #1
 800347c:	6862      	ldr	r2, [r4, #4]
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003482:	3a01      	subs	r2, #1
 8003484:	3301      	adds	r3, #1
 8003486:	6062      	str	r2, [r4, #4]
 8003488:	9345      	str	r3, [sp, #276]	; 0x114
 800348a:	e757      	b.n	800333c <__ssvfiscanf_r+0x60>
 800348c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800348e:	4621      	mov	r1, r4
 8003490:	4630      	mov	r0, r6
 8003492:	4798      	blx	r3
 8003494:	2800      	cmp	r0, #0
 8003496:	d0ec      	beq.n	8003472 <__ssvfiscanf_r+0x196>
 8003498:	9844      	ldr	r0, [sp, #272]	; 0x110
 800349a:	2800      	cmp	r0, #0
 800349c:	d159      	bne.n	8003552 <__ssvfiscanf_r+0x276>
 800349e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a2:	e05c      	b.n	800355e <__ssvfiscanf_r+0x282>
 80034a4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80034a6:	f042 0220 	orr.w	r2, r2, #32
 80034aa:	9241      	str	r2, [sp, #260]	; 0x104
 80034ac:	e79b      	b.n	80033e6 <__ssvfiscanf_r+0x10a>
 80034ae:	2308      	movs	r3, #8
 80034b0:	9342      	str	r3, [sp, #264]	; 0x108
 80034b2:	2304      	movs	r3, #4
 80034b4:	e7b3      	b.n	800341e <__ssvfiscanf_r+0x142>
 80034b6:	4629      	mov	r1, r5
 80034b8:	4640      	mov	r0, r8
 80034ba:	f000 fb3f 	bl	8003b3c <__sccl>
 80034be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80034c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c4:	9341      	str	r3, [sp, #260]	; 0x104
 80034c6:	4605      	mov	r5, r0
 80034c8:	2301      	movs	r3, #1
 80034ca:	e7a8      	b.n	800341e <__ssvfiscanf_r+0x142>
 80034cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80034ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d2:	9341      	str	r3, [sp, #260]	; 0x104
 80034d4:	2300      	movs	r3, #0
 80034d6:	e7a2      	b.n	800341e <__ssvfiscanf_r+0x142>
 80034d8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80034da:	06c3      	lsls	r3, r0, #27
 80034dc:	f53f af2e 	bmi.w	800333c <__ssvfiscanf_r+0x60>
 80034e0:	9b00      	ldr	r3, [sp, #0]
 80034e2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	9100      	str	r1, [sp, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	07c0      	lsls	r0, r0, #31
 80034ec:	bf4c      	ite	mi
 80034ee:	801a      	strhmi	r2, [r3, #0]
 80034f0:	601a      	strpl	r2, [r3, #0]
 80034f2:	e723      	b.n	800333c <__ssvfiscanf_r+0x60>
 80034f4:	2305      	movs	r3, #5
 80034f6:	e792      	b.n	800341e <__ssvfiscanf_r+0x142>
 80034f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80034fa:	4621      	mov	r1, r4
 80034fc:	4630      	mov	r0, r6
 80034fe:	4798      	blx	r3
 8003500:	2800      	cmp	r0, #0
 8003502:	d090      	beq.n	8003426 <__ssvfiscanf_r+0x14a>
 8003504:	e7c8      	b.n	8003498 <__ssvfiscanf_r+0x1bc>
 8003506:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003508:	3201      	adds	r2, #1
 800350a:	9245      	str	r2, [sp, #276]	; 0x114
 800350c:	6862      	ldr	r2, [r4, #4]
 800350e:	3a01      	subs	r2, #1
 8003510:	2a00      	cmp	r2, #0
 8003512:	6062      	str	r2, [r4, #4]
 8003514:	dd02      	ble.n	800351c <__ssvfiscanf_r+0x240>
 8003516:	3301      	adds	r3, #1
 8003518:	6023      	str	r3, [r4, #0]
 800351a:	e787      	b.n	800342c <__ssvfiscanf_r+0x150>
 800351c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800351e:	4621      	mov	r1, r4
 8003520:	4630      	mov	r0, r6
 8003522:	4798      	blx	r3
 8003524:	2800      	cmp	r0, #0
 8003526:	d081      	beq.n	800342c <__ssvfiscanf_r+0x150>
 8003528:	e7b6      	b.n	8003498 <__ssvfiscanf_r+0x1bc>
 800352a:	2b04      	cmp	r3, #4
 800352c:	dc06      	bgt.n	800353c <__ssvfiscanf_r+0x260>
 800352e:	466b      	mov	r3, sp
 8003530:	4622      	mov	r2, r4
 8003532:	a941      	add	r1, sp, #260	; 0x104
 8003534:	4630      	mov	r0, r6
 8003536:	f000 fa0d 	bl	8003954 <_scanf_i>
 800353a:	e788      	b.n	800344e <__ssvfiscanf_r+0x172>
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <__ssvfiscanf_r+0x29c>)
 800353e:	2b00      	cmp	r3, #0
 8003540:	f43f aefc 	beq.w	800333c <__ssvfiscanf_r+0x60>
 8003544:	466b      	mov	r3, sp
 8003546:	4622      	mov	r2, r4
 8003548:	a941      	add	r1, sp, #260	; 0x104
 800354a:	4630      	mov	r0, r6
 800354c:	f3af 8000 	nop.w
 8003550:	e77d      	b.n	800344e <__ssvfiscanf_r+0x172>
 8003552:	89a3      	ldrh	r3, [r4, #12]
 8003554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003558:	bf18      	it	ne
 800355a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800355e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003566:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003568:	e7f9      	b.n	800355e <__ssvfiscanf_r+0x282>
 800356a:	bf00      	nop
 800356c:	08003229 	.word	0x08003229
 8003570:	080032a3 	.word	0x080032a3
 8003574:	0800411a 	.word	0x0800411a
 8003578:	00000000 	.word	0x00000000

0800357c <_printf_common>:
 800357c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003580:	4691      	mov	r9, r2
 8003582:	461f      	mov	r7, r3
 8003584:	688a      	ldr	r2, [r1, #8]
 8003586:	690b      	ldr	r3, [r1, #16]
 8003588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800358c:	4293      	cmp	r3, r2
 800358e:	bfb8      	it	lt
 8003590:	4613      	movlt	r3, r2
 8003592:	f8c9 3000 	str.w	r3, [r9]
 8003596:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800359a:	4606      	mov	r6, r0
 800359c:	460c      	mov	r4, r1
 800359e:	b112      	cbz	r2, 80035a6 <_printf_common+0x2a>
 80035a0:	3301      	adds	r3, #1
 80035a2:	f8c9 3000 	str.w	r3, [r9]
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	0699      	lsls	r1, r3, #26
 80035aa:	bf42      	ittt	mi
 80035ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035b0:	3302      	addmi	r3, #2
 80035b2:	f8c9 3000 	strmi.w	r3, [r9]
 80035b6:	6825      	ldr	r5, [r4, #0]
 80035b8:	f015 0506 	ands.w	r5, r5, #6
 80035bc:	d107      	bne.n	80035ce <_printf_common+0x52>
 80035be:	f104 0a19 	add.w	sl, r4, #25
 80035c2:	68e3      	ldr	r3, [r4, #12]
 80035c4:	f8d9 2000 	ldr.w	r2, [r9]
 80035c8:	1a9b      	subs	r3, r3, r2
 80035ca:	42ab      	cmp	r3, r5
 80035cc:	dc28      	bgt.n	8003620 <_printf_common+0xa4>
 80035ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	3300      	adds	r3, #0
 80035d6:	bf18      	it	ne
 80035d8:	2301      	movne	r3, #1
 80035da:	0692      	lsls	r2, r2, #26
 80035dc:	d42d      	bmi.n	800363a <_printf_common+0xbe>
 80035de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035e2:	4639      	mov	r1, r7
 80035e4:	4630      	mov	r0, r6
 80035e6:	47c0      	blx	r8
 80035e8:	3001      	adds	r0, #1
 80035ea:	d020      	beq.n	800362e <_printf_common+0xb2>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	68e5      	ldr	r5, [r4, #12]
 80035f0:	f8d9 2000 	ldr.w	r2, [r9]
 80035f4:	f003 0306 	and.w	r3, r3, #6
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	bf08      	it	eq
 80035fc:	1aad      	subeq	r5, r5, r2
 80035fe:	68a3      	ldr	r3, [r4, #8]
 8003600:	6922      	ldr	r2, [r4, #16]
 8003602:	bf0c      	ite	eq
 8003604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003608:	2500      	movne	r5, #0
 800360a:	4293      	cmp	r3, r2
 800360c:	bfc4      	itt	gt
 800360e:	1a9b      	subgt	r3, r3, r2
 8003610:	18ed      	addgt	r5, r5, r3
 8003612:	f04f 0900 	mov.w	r9, #0
 8003616:	341a      	adds	r4, #26
 8003618:	454d      	cmp	r5, r9
 800361a:	d11a      	bne.n	8003652 <_printf_common+0xd6>
 800361c:	2000      	movs	r0, #0
 800361e:	e008      	b.n	8003632 <_printf_common+0xb6>
 8003620:	2301      	movs	r3, #1
 8003622:	4652      	mov	r2, sl
 8003624:	4639      	mov	r1, r7
 8003626:	4630      	mov	r0, r6
 8003628:	47c0      	blx	r8
 800362a:	3001      	adds	r0, #1
 800362c:	d103      	bne.n	8003636 <_printf_common+0xba>
 800362e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003636:	3501      	adds	r5, #1
 8003638:	e7c3      	b.n	80035c2 <_printf_common+0x46>
 800363a:	18e1      	adds	r1, r4, r3
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	2030      	movs	r0, #48	; 0x30
 8003640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003644:	4422      	add	r2, r4
 8003646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800364a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800364e:	3302      	adds	r3, #2
 8003650:	e7c5      	b.n	80035de <_printf_common+0x62>
 8003652:	2301      	movs	r3, #1
 8003654:	4622      	mov	r2, r4
 8003656:	4639      	mov	r1, r7
 8003658:	4630      	mov	r0, r6
 800365a:	47c0      	blx	r8
 800365c:	3001      	adds	r0, #1
 800365e:	d0e6      	beq.n	800362e <_printf_common+0xb2>
 8003660:	f109 0901 	add.w	r9, r9, #1
 8003664:	e7d8      	b.n	8003618 <_printf_common+0x9c>
	...

08003668 <_printf_i>:
 8003668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800366c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003670:	460c      	mov	r4, r1
 8003672:	7e09      	ldrb	r1, [r1, #24]
 8003674:	b085      	sub	sp, #20
 8003676:	296e      	cmp	r1, #110	; 0x6e
 8003678:	4617      	mov	r7, r2
 800367a:	4606      	mov	r6, r0
 800367c:	4698      	mov	r8, r3
 800367e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003680:	f000 80b3 	beq.w	80037ea <_printf_i+0x182>
 8003684:	d822      	bhi.n	80036cc <_printf_i+0x64>
 8003686:	2963      	cmp	r1, #99	; 0x63
 8003688:	d036      	beq.n	80036f8 <_printf_i+0x90>
 800368a:	d80a      	bhi.n	80036a2 <_printf_i+0x3a>
 800368c:	2900      	cmp	r1, #0
 800368e:	f000 80b9 	beq.w	8003804 <_printf_i+0x19c>
 8003692:	2958      	cmp	r1, #88	; 0x58
 8003694:	f000 8083 	beq.w	800379e <_printf_i+0x136>
 8003698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80036a0:	e032      	b.n	8003708 <_printf_i+0xa0>
 80036a2:	2964      	cmp	r1, #100	; 0x64
 80036a4:	d001      	beq.n	80036aa <_printf_i+0x42>
 80036a6:	2969      	cmp	r1, #105	; 0x69
 80036a8:	d1f6      	bne.n	8003698 <_printf_i+0x30>
 80036aa:	6820      	ldr	r0, [r4, #0]
 80036ac:	6813      	ldr	r3, [r2, #0]
 80036ae:	0605      	lsls	r5, r0, #24
 80036b0:	f103 0104 	add.w	r1, r3, #4
 80036b4:	d52a      	bpl.n	800370c <_printf_i+0xa4>
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	da03      	bge.n	80036c6 <_printf_i+0x5e>
 80036be:	222d      	movs	r2, #45	; 0x2d
 80036c0:	425b      	negs	r3, r3
 80036c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036c6:	486f      	ldr	r0, [pc, #444]	; (8003884 <_printf_i+0x21c>)
 80036c8:	220a      	movs	r2, #10
 80036ca:	e039      	b.n	8003740 <_printf_i+0xd8>
 80036cc:	2973      	cmp	r1, #115	; 0x73
 80036ce:	f000 809d 	beq.w	800380c <_printf_i+0x1a4>
 80036d2:	d808      	bhi.n	80036e6 <_printf_i+0x7e>
 80036d4:	296f      	cmp	r1, #111	; 0x6f
 80036d6:	d020      	beq.n	800371a <_printf_i+0xb2>
 80036d8:	2970      	cmp	r1, #112	; 0x70
 80036da:	d1dd      	bne.n	8003698 <_printf_i+0x30>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	f043 0320 	orr.w	r3, r3, #32
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	e003      	b.n	80036ee <_printf_i+0x86>
 80036e6:	2975      	cmp	r1, #117	; 0x75
 80036e8:	d017      	beq.n	800371a <_printf_i+0xb2>
 80036ea:	2978      	cmp	r1, #120	; 0x78
 80036ec:	d1d4      	bne.n	8003698 <_printf_i+0x30>
 80036ee:	2378      	movs	r3, #120	; 0x78
 80036f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036f4:	4864      	ldr	r0, [pc, #400]	; (8003888 <_printf_i+0x220>)
 80036f6:	e055      	b.n	80037a4 <_printf_i+0x13c>
 80036f8:	6813      	ldr	r3, [r2, #0]
 80036fa:	1d19      	adds	r1, r3, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6011      	str	r1, [r2, #0]
 8003700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003708:	2301      	movs	r3, #1
 800370a:	e08c      	b.n	8003826 <_printf_i+0x1be>
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6011      	str	r1, [r2, #0]
 8003710:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003714:	bf18      	it	ne
 8003716:	b21b      	sxthne	r3, r3
 8003718:	e7cf      	b.n	80036ba <_printf_i+0x52>
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	6825      	ldr	r5, [r4, #0]
 800371e:	1d18      	adds	r0, r3, #4
 8003720:	6010      	str	r0, [r2, #0]
 8003722:	0628      	lsls	r0, r5, #24
 8003724:	d501      	bpl.n	800372a <_printf_i+0xc2>
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	e002      	b.n	8003730 <_printf_i+0xc8>
 800372a:	0668      	lsls	r0, r5, #25
 800372c:	d5fb      	bpl.n	8003726 <_printf_i+0xbe>
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	4854      	ldr	r0, [pc, #336]	; (8003884 <_printf_i+0x21c>)
 8003732:	296f      	cmp	r1, #111	; 0x6f
 8003734:	bf14      	ite	ne
 8003736:	220a      	movne	r2, #10
 8003738:	2208      	moveq	r2, #8
 800373a:	2100      	movs	r1, #0
 800373c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003740:	6865      	ldr	r5, [r4, #4]
 8003742:	60a5      	str	r5, [r4, #8]
 8003744:	2d00      	cmp	r5, #0
 8003746:	f2c0 8095 	blt.w	8003874 <_printf_i+0x20c>
 800374a:	6821      	ldr	r1, [r4, #0]
 800374c:	f021 0104 	bic.w	r1, r1, #4
 8003750:	6021      	str	r1, [r4, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d13d      	bne.n	80037d2 <_printf_i+0x16a>
 8003756:	2d00      	cmp	r5, #0
 8003758:	f040 808e 	bne.w	8003878 <_printf_i+0x210>
 800375c:	4665      	mov	r5, ip
 800375e:	2a08      	cmp	r2, #8
 8003760:	d10b      	bne.n	800377a <_printf_i+0x112>
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	07db      	lsls	r3, r3, #31
 8003766:	d508      	bpl.n	800377a <_printf_i+0x112>
 8003768:	6923      	ldr	r3, [r4, #16]
 800376a:	6862      	ldr	r2, [r4, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	bfde      	ittt	le
 8003770:	2330      	movle	r3, #48	; 0x30
 8003772:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003776:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800377a:	ebac 0305 	sub.w	r3, ip, r5
 800377e:	6123      	str	r3, [r4, #16]
 8003780:	f8cd 8000 	str.w	r8, [sp]
 8003784:	463b      	mov	r3, r7
 8003786:	aa03      	add	r2, sp, #12
 8003788:	4621      	mov	r1, r4
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff fef6 	bl	800357c <_printf_common>
 8003790:	3001      	adds	r0, #1
 8003792:	d14d      	bne.n	8003830 <_printf_i+0x1c8>
 8003794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003798:	b005      	add	sp, #20
 800379a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800379e:	4839      	ldr	r0, [pc, #228]	; (8003884 <_printf_i+0x21c>)
 80037a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80037a4:	6813      	ldr	r3, [r2, #0]
 80037a6:	6821      	ldr	r1, [r4, #0]
 80037a8:	1d1d      	adds	r5, r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6015      	str	r5, [r2, #0]
 80037ae:	060a      	lsls	r2, r1, #24
 80037b0:	d50b      	bpl.n	80037ca <_printf_i+0x162>
 80037b2:	07ca      	lsls	r2, r1, #31
 80037b4:	bf44      	itt	mi
 80037b6:	f041 0120 	orrmi.w	r1, r1, #32
 80037ba:	6021      	strmi	r1, [r4, #0]
 80037bc:	b91b      	cbnz	r3, 80037c6 <_printf_i+0x15e>
 80037be:	6822      	ldr	r2, [r4, #0]
 80037c0:	f022 0220 	bic.w	r2, r2, #32
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	2210      	movs	r2, #16
 80037c8:	e7b7      	b.n	800373a <_printf_i+0xd2>
 80037ca:	064d      	lsls	r5, r1, #25
 80037cc:	bf48      	it	mi
 80037ce:	b29b      	uxthmi	r3, r3
 80037d0:	e7ef      	b.n	80037b2 <_printf_i+0x14a>
 80037d2:	4665      	mov	r5, ip
 80037d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037d8:	fb02 3311 	mls	r3, r2, r1, r3
 80037dc:	5cc3      	ldrb	r3, [r0, r3]
 80037de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037e2:	460b      	mov	r3, r1
 80037e4:	2900      	cmp	r1, #0
 80037e6:	d1f5      	bne.n	80037d4 <_printf_i+0x16c>
 80037e8:	e7b9      	b.n	800375e <_printf_i+0xf6>
 80037ea:	6813      	ldr	r3, [r2, #0]
 80037ec:	6825      	ldr	r5, [r4, #0]
 80037ee:	6961      	ldr	r1, [r4, #20]
 80037f0:	1d18      	adds	r0, r3, #4
 80037f2:	6010      	str	r0, [r2, #0]
 80037f4:	0628      	lsls	r0, r5, #24
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	d501      	bpl.n	80037fe <_printf_i+0x196>
 80037fa:	6019      	str	r1, [r3, #0]
 80037fc:	e002      	b.n	8003804 <_printf_i+0x19c>
 80037fe:	066a      	lsls	r2, r5, #25
 8003800:	d5fb      	bpl.n	80037fa <_printf_i+0x192>
 8003802:	8019      	strh	r1, [r3, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	6123      	str	r3, [r4, #16]
 8003808:	4665      	mov	r5, ip
 800380a:	e7b9      	b.n	8003780 <_printf_i+0x118>
 800380c:	6813      	ldr	r3, [r2, #0]
 800380e:	1d19      	adds	r1, r3, #4
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	681d      	ldr	r5, [r3, #0]
 8003814:	6862      	ldr	r2, [r4, #4]
 8003816:	2100      	movs	r1, #0
 8003818:	4628      	mov	r0, r5
 800381a:	f7fc fce9 	bl	80001f0 <memchr>
 800381e:	b108      	cbz	r0, 8003824 <_printf_i+0x1bc>
 8003820:	1b40      	subs	r0, r0, r5
 8003822:	6060      	str	r0, [r4, #4]
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	2300      	movs	r3, #0
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382e:	e7a7      	b.n	8003780 <_printf_i+0x118>
 8003830:	6923      	ldr	r3, [r4, #16]
 8003832:	462a      	mov	r2, r5
 8003834:	4639      	mov	r1, r7
 8003836:	4630      	mov	r0, r6
 8003838:	47c0      	blx	r8
 800383a:	3001      	adds	r0, #1
 800383c:	d0aa      	beq.n	8003794 <_printf_i+0x12c>
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	079b      	lsls	r3, r3, #30
 8003842:	d413      	bmi.n	800386c <_printf_i+0x204>
 8003844:	68e0      	ldr	r0, [r4, #12]
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	4298      	cmp	r0, r3
 800384a:	bfb8      	it	lt
 800384c:	4618      	movlt	r0, r3
 800384e:	e7a3      	b.n	8003798 <_printf_i+0x130>
 8003850:	2301      	movs	r3, #1
 8003852:	464a      	mov	r2, r9
 8003854:	4639      	mov	r1, r7
 8003856:	4630      	mov	r0, r6
 8003858:	47c0      	blx	r8
 800385a:	3001      	adds	r0, #1
 800385c:	d09a      	beq.n	8003794 <_printf_i+0x12c>
 800385e:	3501      	adds	r5, #1
 8003860:	68e3      	ldr	r3, [r4, #12]
 8003862:	9a03      	ldr	r2, [sp, #12]
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	42ab      	cmp	r3, r5
 8003868:	dcf2      	bgt.n	8003850 <_printf_i+0x1e8>
 800386a:	e7eb      	b.n	8003844 <_printf_i+0x1dc>
 800386c:	2500      	movs	r5, #0
 800386e:	f104 0919 	add.w	r9, r4, #25
 8003872:	e7f5      	b.n	8003860 <_printf_i+0x1f8>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1ac      	bne.n	80037d2 <_printf_i+0x16a>
 8003878:	7803      	ldrb	r3, [r0, #0]
 800387a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800387e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003882:	e76c      	b.n	800375e <_printf_i+0xf6>
 8003884:	08004125 	.word	0x08004125
 8003888:	08004136 	.word	0x08004136

0800388c <_scanf_chars>:
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	4615      	mov	r5, r2
 8003892:	688a      	ldr	r2, [r1, #8]
 8003894:	4680      	mov	r8, r0
 8003896:	460c      	mov	r4, r1
 8003898:	b932      	cbnz	r2, 80038a8 <_scanf_chars+0x1c>
 800389a:	698a      	ldr	r2, [r1, #24]
 800389c:	2a00      	cmp	r2, #0
 800389e:	bf14      	ite	ne
 80038a0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80038a4:	2201      	moveq	r2, #1
 80038a6:	608a      	str	r2, [r1, #8]
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	06d1      	lsls	r1, r2, #27
 80038ac:	bf5f      	itttt	pl
 80038ae:	681a      	ldrpl	r2, [r3, #0]
 80038b0:	1d11      	addpl	r1, r2, #4
 80038b2:	6019      	strpl	r1, [r3, #0]
 80038b4:	6817      	ldrpl	r7, [r2, #0]
 80038b6:	2600      	movs	r6, #0
 80038b8:	69a3      	ldr	r3, [r4, #24]
 80038ba:	b1db      	cbz	r3, 80038f4 <_scanf_chars+0x68>
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d107      	bne.n	80038d0 <_scanf_chars+0x44>
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	6962      	ldr	r2, [r4, #20]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	b9a3      	cbnz	r3, 80038f4 <_scanf_chars+0x68>
 80038ca:	2e00      	cmp	r6, #0
 80038cc:	d132      	bne.n	8003934 <_scanf_chars+0xa8>
 80038ce:	e006      	b.n	80038de <_scanf_chars+0x52>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d007      	beq.n	80038e4 <_scanf_chars+0x58>
 80038d4:	2e00      	cmp	r6, #0
 80038d6:	d12d      	bne.n	8003934 <_scanf_chars+0xa8>
 80038d8:	69a3      	ldr	r3, [r4, #24]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d12a      	bne.n	8003934 <_scanf_chars+0xa8>
 80038de:	2001      	movs	r0, #1
 80038e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e4:	f000 fab4 	bl	8003e50 <__locale_ctype_ptr>
 80038e8:	682b      	ldr	r3, [r5, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4418      	add	r0, r3
 80038ee:	7843      	ldrb	r3, [r0, #1]
 80038f0:	071b      	lsls	r3, r3, #28
 80038f2:	d4ef      	bmi.n	80038d4 <_scanf_chars+0x48>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	06da      	lsls	r2, r3, #27
 80038f8:	bf5e      	ittt	pl
 80038fa:	682b      	ldrpl	r3, [r5, #0]
 80038fc:	781b      	ldrbpl	r3, [r3, #0]
 80038fe:	703b      	strbpl	r3, [r7, #0]
 8003900:	682a      	ldr	r2, [r5, #0]
 8003902:	686b      	ldr	r3, [r5, #4]
 8003904:	f102 0201 	add.w	r2, r2, #1
 8003908:	602a      	str	r2, [r5, #0]
 800390a:	68a2      	ldr	r2, [r4, #8]
 800390c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003910:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003914:	606b      	str	r3, [r5, #4]
 8003916:	f106 0601 	add.w	r6, r6, #1
 800391a:	bf58      	it	pl
 800391c:	3701      	addpl	r7, #1
 800391e:	60a2      	str	r2, [r4, #8]
 8003920:	b142      	cbz	r2, 8003934 <_scanf_chars+0xa8>
 8003922:	2b00      	cmp	r3, #0
 8003924:	dcc8      	bgt.n	80038b8 <_scanf_chars+0x2c>
 8003926:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800392a:	4629      	mov	r1, r5
 800392c:	4640      	mov	r0, r8
 800392e:	4798      	blx	r3
 8003930:	2800      	cmp	r0, #0
 8003932:	d0c1      	beq.n	80038b8 <_scanf_chars+0x2c>
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f013 0310 	ands.w	r3, r3, #16
 800393a:	d105      	bne.n	8003948 <_scanf_chars+0xbc>
 800393c:	68e2      	ldr	r2, [r4, #12]
 800393e:	3201      	adds	r2, #1
 8003940:	60e2      	str	r2, [r4, #12]
 8003942:	69a2      	ldr	r2, [r4, #24]
 8003944:	b102      	cbz	r2, 8003948 <_scanf_chars+0xbc>
 8003946:	703b      	strb	r3, [r7, #0]
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	441e      	add	r6, r3
 800394c:	6126      	str	r6, [r4, #16]
 800394e:	2000      	movs	r0, #0
 8003950:	e7c6      	b.n	80038e0 <_scanf_chars+0x54>
	...

08003954 <_scanf_i>:
 8003954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003958:	469a      	mov	sl, r3
 800395a:	4b74      	ldr	r3, [pc, #464]	; (8003b2c <_scanf_i+0x1d8>)
 800395c:	460c      	mov	r4, r1
 800395e:	4683      	mov	fp, r0
 8003960:	4616      	mov	r6, r2
 8003962:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003966:	b087      	sub	sp, #28
 8003968:	ab03      	add	r3, sp, #12
 800396a:	68a7      	ldr	r7, [r4, #8]
 800396c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003970:	4b6f      	ldr	r3, [pc, #444]	; (8003b30 <_scanf_i+0x1dc>)
 8003972:	69a1      	ldr	r1, [r4, #24]
 8003974:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <_scanf_i+0x1e0>)
 8003976:	2903      	cmp	r1, #3
 8003978:	bf08      	it	eq
 800397a:	461a      	moveq	r2, r3
 800397c:	1e7b      	subs	r3, r7, #1
 800397e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003982:	bf84      	itt	hi
 8003984:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003988:	60a3      	strhi	r3, [r4, #8]
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	9200      	str	r2, [sp, #0]
 800398e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003992:	bf88      	it	hi
 8003994:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003998:	f104 091c 	add.w	r9, r4, #28
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	bf8c      	ite	hi
 80039a0:	197f      	addhi	r7, r7, r5
 80039a2:	2700      	movls	r7, #0
 80039a4:	464b      	mov	r3, r9
 80039a6:	f04f 0800 	mov.w	r8, #0
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6831      	ldr	r1, [r6, #0]
 80039ae:	ab03      	add	r3, sp, #12
 80039b0:	2202      	movs	r2, #2
 80039b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80039b6:	7809      	ldrb	r1, [r1, #0]
 80039b8:	f7fc fc1a 	bl	80001f0 <memchr>
 80039bc:	9b01      	ldr	r3, [sp, #4]
 80039be:	b330      	cbz	r0, 8003a0e <_scanf_i+0xba>
 80039c0:	f1b8 0f01 	cmp.w	r8, #1
 80039c4:	d15a      	bne.n	8003a7c <_scanf_i+0x128>
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	b92a      	cbnz	r2, 80039d6 <_scanf_i+0x82>
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	2108      	movs	r1, #8
 80039ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d2:	6061      	str	r1, [r4, #4]
 80039d4:	6022      	str	r2, [r4, #0]
 80039d6:	6822      	ldr	r2, [r4, #0]
 80039d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80039dc:	6022      	str	r2, [r4, #0]
 80039de:	68a2      	ldr	r2, [r4, #8]
 80039e0:	1e51      	subs	r1, r2, #1
 80039e2:	60a1      	str	r1, [r4, #8]
 80039e4:	b19a      	cbz	r2, 8003a0e <_scanf_i+0xba>
 80039e6:	6832      	ldr	r2, [r6, #0]
 80039e8:	1c51      	adds	r1, r2, #1
 80039ea:	6031      	str	r1, [r6, #0]
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	1c5d      	adds	r5, r3, #1
 80039f2:	6873      	ldr	r3, [r6, #4]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	6073      	str	r3, [r6, #4]
 80039fa:	dc07      	bgt.n	8003a0c <_scanf_i+0xb8>
 80039fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a00:	4631      	mov	r1, r6
 8003a02:	4658      	mov	r0, fp
 8003a04:	4798      	blx	r3
 8003a06:	2800      	cmp	r0, #0
 8003a08:	f040 8086 	bne.w	8003b18 <_scanf_i+0x1c4>
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	f108 0801 	add.w	r8, r8, #1
 8003a12:	f1b8 0f03 	cmp.w	r8, #3
 8003a16:	d1c8      	bne.n	80039aa <_scanf_i+0x56>
 8003a18:	6862      	ldr	r2, [r4, #4]
 8003a1a:	b90a      	cbnz	r2, 8003a20 <_scanf_i+0xcc>
 8003a1c:	220a      	movs	r2, #10
 8003a1e:	6062      	str	r2, [r4, #4]
 8003a20:	6862      	ldr	r2, [r4, #4]
 8003a22:	4945      	ldr	r1, [pc, #276]	; (8003b38 <_scanf_i+0x1e4>)
 8003a24:	6960      	ldr	r0, [r4, #20]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	1a89      	subs	r1, r1, r2
 8003a2a:	f000 f887 	bl	8003b3c <__sccl>
 8003a2e:	9b01      	ldr	r3, [sp, #4]
 8003a30:	f04f 0800 	mov.w	r8, #0
 8003a34:	461d      	mov	r5, r3
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	6822      	ldr	r2, [r4, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d03a      	beq.n	8003ab4 <_scanf_i+0x160>
 8003a3e:	6831      	ldr	r1, [r6, #0]
 8003a40:	6960      	ldr	r0, [r4, #20]
 8003a42:	f891 c000 	ldrb.w	ip, [r1]
 8003a46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003a4a:	2800      	cmp	r0, #0
 8003a4c:	d032      	beq.n	8003ab4 <_scanf_i+0x160>
 8003a4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003a52:	d121      	bne.n	8003a98 <_scanf_i+0x144>
 8003a54:	0510      	lsls	r0, r2, #20
 8003a56:	d51f      	bpl.n	8003a98 <_scanf_i+0x144>
 8003a58:	f108 0801 	add.w	r8, r8, #1
 8003a5c:	b117      	cbz	r7, 8003a64 <_scanf_i+0x110>
 8003a5e:	3301      	adds	r3, #1
 8003a60:	3f01      	subs	r7, #1
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	6873      	ldr	r3, [r6, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	6073      	str	r3, [r6, #4]
 8003a6c:	dd1b      	ble.n	8003aa6 <_scanf_i+0x152>
 8003a6e:	6833      	ldr	r3, [r6, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	68a3      	ldr	r3, [r4, #8]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	60a3      	str	r3, [r4, #8]
 8003a7a:	e7dc      	b.n	8003a36 <_scanf_i+0xe2>
 8003a7c:	f1b8 0f02 	cmp.w	r8, #2
 8003a80:	d1ad      	bne.n	80039de <_scanf_i+0x8a>
 8003a82:	6822      	ldr	r2, [r4, #0]
 8003a84:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003a88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a8c:	d1bf      	bne.n	8003a0e <_scanf_i+0xba>
 8003a8e:	2110      	movs	r1, #16
 8003a90:	6061      	str	r1, [r4, #4]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	e7a1      	b.n	80039dc <_scanf_i+0x88>
 8003a98:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003a9c:	6022      	str	r2, [r4, #0]
 8003a9e:	780b      	ldrb	r3, [r1, #0]
 8003aa0:	702b      	strb	r3, [r5, #0]
 8003aa2:	3501      	adds	r5, #1
 8003aa4:	e7de      	b.n	8003a64 <_scanf_i+0x110>
 8003aa6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4658      	mov	r0, fp
 8003aae:	4798      	blx	r3
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d0df      	beq.n	8003a74 <_scanf_i+0x120>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	05d9      	lsls	r1, r3, #23
 8003ab8:	d50c      	bpl.n	8003ad4 <_scanf_i+0x180>
 8003aba:	454d      	cmp	r5, r9
 8003abc:	d908      	bls.n	8003ad0 <_scanf_i+0x17c>
 8003abe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003ac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ac6:	4632      	mov	r2, r6
 8003ac8:	4658      	mov	r0, fp
 8003aca:	4798      	blx	r3
 8003acc:	1e6f      	subs	r7, r5, #1
 8003ace:	463d      	mov	r5, r7
 8003ad0:	454d      	cmp	r5, r9
 8003ad2:	d029      	beq.n	8003b28 <_scanf_i+0x1d4>
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	f012 0210 	ands.w	r2, r2, #16
 8003ada:	d113      	bne.n	8003b04 <_scanf_i+0x1b0>
 8003adc:	702a      	strb	r2, [r5, #0]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	9e00      	ldr	r6, [sp, #0]
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	4658      	mov	r0, fp
 8003ae6:	47b0      	blx	r6
 8003ae8:	f8da 3000 	ldr.w	r3, [sl]
 8003aec:	6821      	ldr	r1, [r4, #0]
 8003aee:	1d1a      	adds	r2, r3, #4
 8003af0:	f8ca 2000 	str.w	r2, [sl]
 8003af4:	f011 0f20 	tst.w	r1, #32
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	d010      	beq.n	8003b1e <_scanf_i+0x1ca>
 8003afc:	6018      	str	r0, [r3, #0]
 8003afe:	68e3      	ldr	r3, [r4, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60e3      	str	r3, [r4, #12]
 8003b04:	eba5 0509 	sub.w	r5, r5, r9
 8003b08:	44a8      	add	r8, r5
 8003b0a:	6925      	ldr	r5, [r4, #16]
 8003b0c:	4445      	add	r5, r8
 8003b0e:	6125      	str	r5, [r4, #16]
 8003b10:	2000      	movs	r0, #0
 8003b12:	b007      	add	sp, #28
 8003b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b18:	f04f 0800 	mov.w	r8, #0
 8003b1c:	e7ca      	b.n	8003ab4 <_scanf_i+0x160>
 8003b1e:	07ca      	lsls	r2, r1, #31
 8003b20:	bf4c      	ite	mi
 8003b22:	8018      	strhmi	r0, [r3, #0]
 8003b24:	6018      	strpl	r0, [r3, #0]
 8003b26:	e7ea      	b.n	8003afe <_scanf_i+0x1aa>
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e7f2      	b.n	8003b12 <_scanf_i+0x1be>
 8003b2c:	080040f0 	.word	0x080040f0
 8003b30:	08003c99 	.word	0x08003c99
 8003b34:	08003db1 	.word	0x08003db1
 8003b38:	08004157 	.word	0x08004157

08003b3c <__sccl>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	780b      	ldrb	r3, [r1, #0]
 8003b40:	2b5e      	cmp	r3, #94	; 0x5e
 8003b42:	bf13      	iteet	ne
 8003b44:	1c4a      	addne	r2, r1, #1
 8003b46:	1c8a      	addeq	r2, r1, #2
 8003b48:	784b      	ldrbeq	r3, [r1, #1]
 8003b4a:	2100      	movne	r1, #0
 8003b4c:	bf08      	it	eq
 8003b4e:	2101      	moveq	r1, #1
 8003b50:	1e44      	subs	r4, r0, #1
 8003b52:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003b56:	f804 1f01 	strb.w	r1, [r4, #1]!
 8003b5a:	42ac      	cmp	r4, r5
 8003b5c:	d1fb      	bne.n	8003b56 <__sccl+0x1a>
 8003b5e:	b913      	cbnz	r3, 8003b66 <__sccl+0x2a>
 8003b60:	3a01      	subs	r2, #1
 8003b62:	4610      	mov	r0, r2
 8003b64:	bd70      	pop	{r4, r5, r6, pc}
 8003b66:	f081 0401 	eor.w	r4, r1, #1
 8003b6a:	54c4      	strb	r4, [r0, r3]
 8003b6c:	1c51      	adds	r1, r2, #1
 8003b6e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8003b72:	2d2d      	cmp	r5, #45	; 0x2d
 8003b74:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8003b78:	460a      	mov	r2, r1
 8003b7a:	d006      	beq.n	8003b8a <__sccl+0x4e>
 8003b7c:	2d5d      	cmp	r5, #93	; 0x5d
 8003b7e:	d0f0      	beq.n	8003b62 <__sccl+0x26>
 8003b80:	b90d      	cbnz	r5, 8003b86 <__sccl+0x4a>
 8003b82:	4632      	mov	r2, r6
 8003b84:	e7ed      	b.n	8003b62 <__sccl+0x26>
 8003b86:	462b      	mov	r3, r5
 8003b88:	e7ef      	b.n	8003b6a <__sccl+0x2e>
 8003b8a:	780e      	ldrb	r6, [r1, #0]
 8003b8c:	2e5d      	cmp	r6, #93	; 0x5d
 8003b8e:	d0fa      	beq.n	8003b86 <__sccl+0x4a>
 8003b90:	42b3      	cmp	r3, r6
 8003b92:	dcf8      	bgt.n	8003b86 <__sccl+0x4a>
 8003b94:	3301      	adds	r3, #1
 8003b96:	429e      	cmp	r6, r3
 8003b98:	54c4      	strb	r4, [r0, r3]
 8003b9a:	dcfb      	bgt.n	8003b94 <__sccl+0x58>
 8003b9c:	3102      	adds	r1, #2
 8003b9e:	e7e6      	b.n	8003b6e <__sccl+0x32>

08003ba0 <_strtol_l.isra.0>:
 8003ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	4680      	mov	r8, r0
 8003ba6:	4689      	mov	r9, r1
 8003ba8:	4692      	mov	sl, r2
 8003baa:	461e      	mov	r6, r3
 8003bac:	460f      	mov	r7, r1
 8003bae:	463d      	mov	r5, r7
 8003bb0:	9808      	ldr	r0, [sp, #32]
 8003bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bb6:	f000 f947 	bl	8003e48 <__locale_ctype_ptr_l>
 8003bba:	4420      	add	r0, r4
 8003bbc:	7843      	ldrb	r3, [r0, #1]
 8003bbe:	f013 0308 	ands.w	r3, r3, #8
 8003bc2:	d132      	bne.n	8003c2a <_strtol_l.isra.0+0x8a>
 8003bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8003bc6:	d132      	bne.n	8003c2e <_strtol_l.isra.0+0x8e>
 8003bc8:	787c      	ldrb	r4, [r7, #1]
 8003bca:	1cbd      	adds	r5, r7, #2
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2e00      	cmp	r6, #0
 8003bd0:	d05d      	beq.n	8003c8e <_strtol_l.isra.0+0xee>
 8003bd2:	2e10      	cmp	r6, #16
 8003bd4:	d109      	bne.n	8003bea <_strtol_l.isra.0+0x4a>
 8003bd6:	2c30      	cmp	r4, #48	; 0x30
 8003bd8:	d107      	bne.n	8003bea <_strtol_l.isra.0+0x4a>
 8003bda:	782b      	ldrb	r3, [r5, #0]
 8003bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003be0:	2b58      	cmp	r3, #88	; 0x58
 8003be2:	d14f      	bne.n	8003c84 <_strtol_l.isra.0+0xe4>
 8003be4:	786c      	ldrb	r4, [r5, #1]
 8003be6:	2610      	movs	r6, #16
 8003be8:	3502      	adds	r5, #2
 8003bea:	2a00      	cmp	r2, #0
 8003bec:	bf14      	ite	ne
 8003bee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003bf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003bf6:	2700      	movs	r7, #0
 8003bf8:	fbb1 fcf6 	udiv	ip, r1, r6
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003c02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	d817      	bhi.n	8003c3a <_strtol_l.isra.0+0x9a>
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	dd23      	ble.n	8003c58 <_strtol_l.isra.0+0xb8>
 8003c10:	1c7b      	adds	r3, r7, #1
 8003c12:	d007      	beq.n	8003c24 <_strtol_l.isra.0+0x84>
 8003c14:	4584      	cmp	ip, r0
 8003c16:	d31c      	bcc.n	8003c52 <_strtol_l.isra.0+0xb2>
 8003c18:	d101      	bne.n	8003c1e <_strtol_l.isra.0+0x7e>
 8003c1a:	45a6      	cmp	lr, r4
 8003c1c:	db19      	blt.n	8003c52 <_strtol_l.isra.0+0xb2>
 8003c1e:	fb00 4006 	mla	r0, r0, r6, r4
 8003c22:	2701      	movs	r7, #1
 8003c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c28:	e7eb      	b.n	8003c02 <_strtol_l.isra.0+0x62>
 8003c2a:	462f      	mov	r7, r5
 8003c2c:	e7bf      	b.n	8003bae <_strtol_l.isra.0+0xe>
 8003c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8003c30:	bf04      	itt	eq
 8003c32:	1cbd      	addeq	r5, r7, #2
 8003c34:	787c      	ldrbeq	r4, [r7, #1]
 8003c36:	461a      	mov	r2, r3
 8003c38:	e7c9      	b.n	8003bce <_strtol_l.isra.0+0x2e>
 8003c3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003c3e:	2b19      	cmp	r3, #25
 8003c40:	d801      	bhi.n	8003c46 <_strtol_l.isra.0+0xa6>
 8003c42:	3c37      	subs	r4, #55	; 0x37
 8003c44:	e7e2      	b.n	8003c0c <_strtol_l.isra.0+0x6c>
 8003c46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003c4a:	2b19      	cmp	r3, #25
 8003c4c:	d804      	bhi.n	8003c58 <_strtol_l.isra.0+0xb8>
 8003c4e:	3c57      	subs	r4, #87	; 0x57
 8003c50:	e7dc      	b.n	8003c0c <_strtol_l.isra.0+0x6c>
 8003c52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003c56:	e7e5      	b.n	8003c24 <_strtol_l.isra.0+0x84>
 8003c58:	1c7b      	adds	r3, r7, #1
 8003c5a:	d108      	bne.n	8003c6e <_strtol_l.isra.0+0xce>
 8003c5c:	2322      	movs	r3, #34	; 0x22
 8003c5e:	f8c8 3000 	str.w	r3, [r8]
 8003c62:	4608      	mov	r0, r1
 8003c64:	f1ba 0f00 	cmp.w	sl, #0
 8003c68:	d107      	bne.n	8003c7a <_strtol_l.isra.0+0xda>
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	b102      	cbz	r2, 8003c72 <_strtol_l.isra.0+0xd2>
 8003c70:	4240      	negs	r0, r0
 8003c72:	f1ba 0f00 	cmp.w	sl, #0
 8003c76:	d0f8      	beq.n	8003c6a <_strtol_l.isra.0+0xca>
 8003c78:	b10f      	cbz	r7, 8003c7e <_strtol_l.isra.0+0xde>
 8003c7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003c7e:	f8ca 9000 	str.w	r9, [sl]
 8003c82:	e7f2      	b.n	8003c6a <_strtol_l.isra.0+0xca>
 8003c84:	2430      	movs	r4, #48	; 0x30
 8003c86:	2e00      	cmp	r6, #0
 8003c88:	d1af      	bne.n	8003bea <_strtol_l.isra.0+0x4a>
 8003c8a:	2608      	movs	r6, #8
 8003c8c:	e7ad      	b.n	8003bea <_strtol_l.isra.0+0x4a>
 8003c8e:	2c30      	cmp	r4, #48	; 0x30
 8003c90:	d0a3      	beq.n	8003bda <_strtol_l.isra.0+0x3a>
 8003c92:	260a      	movs	r6, #10
 8003c94:	e7a9      	b.n	8003bea <_strtol_l.isra.0+0x4a>
	...

08003c98 <_strtol_r>:
 8003c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c9a:	4c06      	ldr	r4, [pc, #24]	; (8003cb4 <_strtol_r+0x1c>)
 8003c9c:	4d06      	ldr	r5, [pc, #24]	; (8003cb8 <_strtol_r+0x20>)
 8003c9e:	6824      	ldr	r4, [r4, #0]
 8003ca0:	6a24      	ldr	r4, [r4, #32]
 8003ca2:	2c00      	cmp	r4, #0
 8003ca4:	bf08      	it	eq
 8003ca6:	462c      	moveq	r4, r5
 8003ca8:	9400      	str	r4, [sp, #0]
 8003caa:	f7ff ff79 	bl	8003ba0 <_strtol_l.isra.0>
 8003cae:	b003      	add	sp, #12
 8003cb0:	bd30      	pop	{r4, r5, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	20000070 	.word	0x20000070

08003cbc <_strtoul_l.isra.0>:
 8003cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	4680      	mov	r8, r0
 8003cc2:	4689      	mov	r9, r1
 8003cc4:	4692      	mov	sl, r2
 8003cc6:	461e      	mov	r6, r3
 8003cc8:	460f      	mov	r7, r1
 8003cca:	463d      	mov	r5, r7
 8003ccc:	9808      	ldr	r0, [sp, #32]
 8003cce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cd2:	f000 f8b9 	bl	8003e48 <__locale_ctype_ptr_l>
 8003cd6:	4420      	add	r0, r4
 8003cd8:	7843      	ldrb	r3, [r0, #1]
 8003cda:	f013 0308 	ands.w	r3, r3, #8
 8003cde:	d130      	bne.n	8003d42 <_strtoul_l.isra.0+0x86>
 8003ce0:	2c2d      	cmp	r4, #45	; 0x2d
 8003ce2:	d130      	bne.n	8003d46 <_strtoul_l.isra.0+0x8a>
 8003ce4:	787c      	ldrb	r4, [r7, #1]
 8003ce6:	1cbd      	adds	r5, r7, #2
 8003ce8:	2101      	movs	r1, #1
 8003cea:	2e00      	cmp	r6, #0
 8003cec:	d05c      	beq.n	8003da8 <_strtoul_l.isra.0+0xec>
 8003cee:	2e10      	cmp	r6, #16
 8003cf0:	d109      	bne.n	8003d06 <_strtoul_l.isra.0+0x4a>
 8003cf2:	2c30      	cmp	r4, #48	; 0x30
 8003cf4:	d107      	bne.n	8003d06 <_strtoul_l.isra.0+0x4a>
 8003cf6:	782b      	ldrb	r3, [r5, #0]
 8003cf8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003cfc:	2b58      	cmp	r3, #88	; 0x58
 8003cfe:	d14e      	bne.n	8003d9e <_strtoul_l.isra.0+0xe2>
 8003d00:	786c      	ldrb	r4, [r5, #1]
 8003d02:	2610      	movs	r6, #16
 8003d04:	3502      	adds	r5, #2
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	fbb2 f2f6 	udiv	r2, r2, r6
 8003d10:	fb06 fc02 	mul.w	ip, r6, r2
 8003d14:	ea6f 0c0c 	mvn.w	ip, ip
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003d1e:	2f09      	cmp	r7, #9
 8003d20:	d817      	bhi.n	8003d52 <_strtoul_l.isra.0+0x96>
 8003d22:	463c      	mov	r4, r7
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	dd23      	ble.n	8003d70 <_strtoul_l.isra.0+0xb4>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	db1e      	blt.n	8003d6a <_strtoul_l.isra.0+0xae>
 8003d2c:	4282      	cmp	r2, r0
 8003d2e:	d31c      	bcc.n	8003d6a <_strtoul_l.isra.0+0xae>
 8003d30:	d101      	bne.n	8003d36 <_strtoul_l.isra.0+0x7a>
 8003d32:	45a4      	cmp	ip, r4
 8003d34:	db19      	blt.n	8003d6a <_strtoul_l.isra.0+0xae>
 8003d36:	fb00 4006 	mla	r0, r0, r6, r4
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d40:	e7eb      	b.n	8003d1a <_strtoul_l.isra.0+0x5e>
 8003d42:	462f      	mov	r7, r5
 8003d44:	e7c1      	b.n	8003cca <_strtoul_l.isra.0+0xe>
 8003d46:	2c2b      	cmp	r4, #43	; 0x2b
 8003d48:	bf04      	itt	eq
 8003d4a:	1cbd      	addeq	r5, r7, #2
 8003d4c:	787c      	ldrbeq	r4, [r7, #1]
 8003d4e:	4619      	mov	r1, r3
 8003d50:	e7cb      	b.n	8003cea <_strtoul_l.isra.0+0x2e>
 8003d52:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003d56:	2f19      	cmp	r7, #25
 8003d58:	d801      	bhi.n	8003d5e <_strtoul_l.isra.0+0xa2>
 8003d5a:	3c37      	subs	r4, #55	; 0x37
 8003d5c:	e7e2      	b.n	8003d24 <_strtoul_l.isra.0+0x68>
 8003d5e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003d62:	2f19      	cmp	r7, #25
 8003d64:	d804      	bhi.n	8003d70 <_strtoul_l.isra.0+0xb4>
 8003d66:	3c57      	subs	r4, #87	; 0x57
 8003d68:	e7dc      	b.n	8003d24 <_strtoul_l.isra.0+0x68>
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d6e:	e7e5      	b.n	8003d3c <_strtoul_l.isra.0+0x80>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da09      	bge.n	8003d88 <_strtoul_l.isra.0+0xcc>
 8003d74:	2322      	movs	r3, #34	; 0x22
 8003d76:	f8c8 3000 	str.w	r3, [r8]
 8003d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d7e:	f1ba 0f00 	cmp.w	sl, #0
 8003d82:	d107      	bne.n	8003d94 <_strtoul_l.isra.0+0xd8>
 8003d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d88:	b101      	cbz	r1, 8003d8c <_strtoul_l.isra.0+0xd0>
 8003d8a:	4240      	negs	r0, r0
 8003d8c:	f1ba 0f00 	cmp.w	sl, #0
 8003d90:	d0f8      	beq.n	8003d84 <_strtoul_l.isra.0+0xc8>
 8003d92:	b10b      	cbz	r3, 8003d98 <_strtoul_l.isra.0+0xdc>
 8003d94:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8003d98:	f8ca 9000 	str.w	r9, [sl]
 8003d9c:	e7f2      	b.n	8003d84 <_strtoul_l.isra.0+0xc8>
 8003d9e:	2430      	movs	r4, #48	; 0x30
 8003da0:	2e00      	cmp	r6, #0
 8003da2:	d1b0      	bne.n	8003d06 <_strtoul_l.isra.0+0x4a>
 8003da4:	2608      	movs	r6, #8
 8003da6:	e7ae      	b.n	8003d06 <_strtoul_l.isra.0+0x4a>
 8003da8:	2c30      	cmp	r4, #48	; 0x30
 8003daa:	d0a4      	beq.n	8003cf6 <_strtoul_l.isra.0+0x3a>
 8003dac:	260a      	movs	r6, #10
 8003dae:	e7aa      	b.n	8003d06 <_strtoul_l.isra.0+0x4a>

08003db0 <_strtoul_r>:
 8003db0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003db2:	4c06      	ldr	r4, [pc, #24]	; (8003dcc <_strtoul_r+0x1c>)
 8003db4:	4d06      	ldr	r5, [pc, #24]	; (8003dd0 <_strtoul_r+0x20>)
 8003db6:	6824      	ldr	r4, [r4, #0]
 8003db8:	6a24      	ldr	r4, [r4, #32]
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	bf08      	it	eq
 8003dbe:	462c      	moveq	r4, r5
 8003dc0:	9400      	str	r4, [sp, #0]
 8003dc2:	f7ff ff7b 	bl	8003cbc <_strtoul_l.isra.0>
 8003dc6:	b003      	add	sp, #12
 8003dc8:	bd30      	pop	{r4, r5, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	20000070 	.word	0x20000070

08003dd4 <__submore>:
 8003dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd8:	460c      	mov	r4, r1
 8003dda:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003de0:	4299      	cmp	r1, r3
 8003de2:	d11d      	bne.n	8003e20 <__submore+0x4c>
 8003de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003de8:	f000 f8c4 	bl	8003f74 <_malloc_r>
 8003dec:	b918      	cbnz	r0, 8003df6 <__submore+0x22>
 8003dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dfa:	63a3      	str	r3, [r4, #56]	; 0x38
 8003dfc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003e00:	6360      	str	r0, [r4, #52]	; 0x34
 8003e02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003e06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003e0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003e16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003e1a:	6020      	str	r0, [r4, #0]
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	e7e8      	b.n	8003df2 <__submore+0x1e>
 8003e20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003e22:	0077      	lsls	r7, r6, #1
 8003e24:	463a      	mov	r2, r7
 8003e26:	f000 f8ff 	bl	8004028 <_realloc_r>
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0de      	beq.n	8003dee <__submore+0x1a>
 8003e30:	eb00 0806 	add.w	r8, r0, r6
 8003e34:	4601      	mov	r1, r0
 8003e36:	4632      	mov	r2, r6
 8003e38:	4640      	mov	r0, r8
 8003e3a:	f000 f829 	bl	8003e90 <memcpy>
 8003e3e:	f8c4 8000 	str.w	r8, [r4]
 8003e42:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003e46:	e7e9      	b.n	8003e1c <__submore+0x48>

08003e48 <__locale_ctype_ptr_l>:
 8003e48:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003e4c:	4770      	bx	lr
	...

08003e50 <__locale_ctype_ptr>:
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <__locale_ctype_ptr+0x14>)
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <__locale_ctype_ptr+0x18>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	bf08      	it	eq
 8003e5c:	4613      	moveq	r3, r2
 8003e5e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003e62:	4770      	bx	lr
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	20000070 	.word	0x20000070

08003e6c <__ascii_mbtowc>:
 8003e6c:	b082      	sub	sp, #8
 8003e6e:	b901      	cbnz	r1, 8003e72 <__ascii_mbtowc+0x6>
 8003e70:	a901      	add	r1, sp, #4
 8003e72:	b142      	cbz	r2, 8003e86 <__ascii_mbtowc+0x1a>
 8003e74:	b14b      	cbz	r3, 8003e8a <__ascii_mbtowc+0x1e>
 8003e76:	7813      	ldrb	r3, [r2, #0]
 8003e78:	600b      	str	r3, [r1, #0]
 8003e7a:	7812      	ldrb	r2, [r2, #0]
 8003e7c:	1c10      	adds	r0, r2, #0
 8003e7e:	bf18      	it	ne
 8003e80:	2001      	movne	r0, #1
 8003e82:	b002      	add	sp, #8
 8003e84:	4770      	bx	lr
 8003e86:	4610      	mov	r0, r2
 8003e88:	e7fb      	b.n	8003e82 <__ascii_mbtowc+0x16>
 8003e8a:	f06f 0001 	mvn.w	r0, #1
 8003e8e:	e7f8      	b.n	8003e82 <__ascii_mbtowc+0x16>

08003e90 <memcpy>:
 8003e90:	b510      	push	{r4, lr}
 8003e92:	1e43      	subs	r3, r0, #1
 8003e94:	440a      	add	r2, r1
 8003e96:	4291      	cmp	r1, r2
 8003e98:	d100      	bne.n	8003e9c <memcpy+0xc>
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ea4:	e7f7      	b.n	8003e96 <memcpy+0x6>

08003ea6 <memmove>:
 8003ea6:	4288      	cmp	r0, r1
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	eb01 0302 	add.w	r3, r1, r2
 8003eae:	d807      	bhi.n	8003ec0 <memmove+0x1a>
 8003eb0:	1e42      	subs	r2, r0, #1
 8003eb2:	4299      	cmp	r1, r3
 8003eb4:	d00a      	beq.n	8003ecc <memmove+0x26>
 8003eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ebe:	e7f8      	b.n	8003eb2 <memmove+0xc>
 8003ec0:	4283      	cmp	r3, r0
 8003ec2:	d9f5      	bls.n	8003eb0 <memmove+0xa>
 8003ec4:	1881      	adds	r1, r0, r2
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	42d3      	cmn	r3, r2
 8003eca:	d100      	bne.n	8003ece <memmove+0x28>
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ed2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ed6:	e7f7      	b.n	8003ec8 <memmove+0x22>

08003ed8 <_free_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4605      	mov	r5, r0
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d045      	beq.n	8003f6c <_free_r+0x94>
 8003ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee4:	1f0c      	subs	r4, r1, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfb8      	it	lt
 8003eea:	18e4      	addlt	r4, r4, r3
 8003eec:	f000 f8df 	bl	80040ae <__malloc_lock>
 8003ef0:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <_free_r+0x98>)
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	b933      	cbnz	r3, 8003f06 <_free_r+0x2e>
 8003ef8:	6063      	str	r3, [r4, #4]
 8003efa:	6014      	str	r4, [r2, #0]
 8003efc:	4628      	mov	r0, r5
 8003efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f02:	f000 b8d5 	b.w	80040b0 <__malloc_unlock>
 8003f06:	42a3      	cmp	r3, r4
 8003f08:	d90c      	bls.n	8003f24 <_free_r+0x4c>
 8003f0a:	6821      	ldr	r1, [r4, #0]
 8003f0c:	1862      	adds	r2, r4, r1
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	bf04      	itt	eq
 8003f12:	681a      	ldreq	r2, [r3, #0]
 8003f14:	685b      	ldreq	r3, [r3, #4]
 8003f16:	6063      	str	r3, [r4, #4]
 8003f18:	bf04      	itt	eq
 8003f1a:	1852      	addeq	r2, r2, r1
 8003f1c:	6022      	streq	r2, [r4, #0]
 8003f1e:	6004      	str	r4, [r0, #0]
 8003f20:	e7ec      	b.n	8003efc <_free_r+0x24>
 8003f22:	4613      	mov	r3, r2
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	b10a      	cbz	r2, 8003f2c <_free_r+0x54>
 8003f28:	42a2      	cmp	r2, r4
 8003f2a:	d9fa      	bls.n	8003f22 <_free_r+0x4a>
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	1858      	adds	r0, r3, r1
 8003f30:	42a0      	cmp	r0, r4
 8003f32:	d10b      	bne.n	8003f4c <_free_r+0x74>
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	4401      	add	r1, r0
 8003f38:	1858      	adds	r0, r3, r1
 8003f3a:	4282      	cmp	r2, r0
 8003f3c:	6019      	str	r1, [r3, #0]
 8003f3e:	d1dd      	bne.n	8003efc <_free_r+0x24>
 8003f40:	6810      	ldr	r0, [r2, #0]
 8003f42:	6852      	ldr	r2, [r2, #4]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	4401      	add	r1, r0
 8003f48:	6019      	str	r1, [r3, #0]
 8003f4a:	e7d7      	b.n	8003efc <_free_r+0x24>
 8003f4c:	d902      	bls.n	8003f54 <_free_r+0x7c>
 8003f4e:	230c      	movs	r3, #12
 8003f50:	602b      	str	r3, [r5, #0]
 8003f52:	e7d3      	b.n	8003efc <_free_r+0x24>
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	1821      	adds	r1, r4, r0
 8003f58:	428a      	cmp	r2, r1
 8003f5a:	bf04      	itt	eq
 8003f5c:	6811      	ldreq	r1, [r2, #0]
 8003f5e:	6852      	ldreq	r2, [r2, #4]
 8003f60:	6062      	str	r2, [r4, #4]
 8003f62:	bf04      	itt	eq
 8003f64:	1809      	addeq	r1, r1, r0
 8003f66:	6021      	streq	r1, [r4, #0]
 8003f68:	605c      	str	r4, [r3, #4]
 8003f6a:	e7c7      	b.n	8003efc <_free_r+0x24>
 8003f6c:	bd38      	pop	{r3, r4, r5, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000204 	.word	0x20000204

08003f74 <_malloc_r>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	1ccd      	adds	r5, r1, #3
 8003f78:	f025 0503 	bic.w	r5, r5, #3
 8003f7c:	3508      	adds	r5, #8
 8003f7e:	2d0c      	cmp	r5, #12
 8003f80:	bf38      	it	cc
 8003f82:	250c      	movcc	r5, #12
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	4606      	mov	r6, r0
 8003f88:	db01      	blt.n	8003f8e <_malloc_r+0x1a>
 8003f8a:	42a9      	cmp	r1, r5
 8003f8c:	d903      	bls.n	8003f96 <_malloc_r+0x22>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	6033      	str	r3, [r6, #0]
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	f000 f88a 	bl	80040ae <__malloc_lock>
 8003f9a:	4a21      	ldr	r2, [pc, #132]	; (8004020 <_malloc_r+0xac>)
 8003f9c:	6814      	ldr	r4, [r2, #0]
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	b991      	cbnz	r1, 8003fc8 <_malloc_r+0x54>
 8003fa2:	4c20      	ldr	r4, [pc, #128]	; (8004024 <_malloc_r+0xb0>)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	b91b      	cbnz	r3, 8003fb0 <_malloc_r+0x3c>
 8003fa8:	4630      	mov	r0, r6
 8003faa:	f000 f863 	bl	8004074 <_sbrk_r>
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f000 f85e 	bl	8004074 <_sbrk_r>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d124      	bne.n	8004006 <_malloc_r+0x92>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	6033      	str	r3, [r6, #0]
 8003fc0:	4630      	mov	r0, r6
 8003fc2:	f000 f875 	bl	80040b0 <__malloc_unlock>
 8003fc6:	e7e4      	b.n	8003f92 <_malloc_r+0x1e>
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	1b5b      	subs	r3, r3, r5
 8003fcc:	d418      	bmi.n	8004000 <_malloc_r+0x8c>
 8003fce:	2b0b      	cmp	r3, #11
 8003fd0:	d90f      	bls.n	8003ff2 <_malloc_r+0x7e>
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	50cd      	str	r5, [r1, r3]
 8003fd6:	18cc      	adds	r4, r1, r3
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f000 f869 	bl	80040b0 <__malloc_unlock>
 8003fde:	f104 000b 	add.w	r0, r4, #11
 8003fe2:	1d23      	adds	r3, r4, #4
 8003fe4:	f020 0007 	bic.w	r0, r0, #7
 8003fe8:	1ac3      	subs	r3, r0, r3
 8003fea:	d0d3      	beq.n	8003f94 <_malloc_r+0x20>
 8003fec:	425a      	negs	r2, r3
 8003fee:	50e2      	str	r2, [r4, r3]
 8003ff0:	e7d0      	b.n	8003f94 <_malloc_r+0x20>
 8003ff2:	428c      	cmp	r4, r1
 8003ff4:	684b      	ldr	r3, [r1, #4]
 8003ff6:	bf16      	itet	ne
 8003ff8:	6063      	strne	r3, [r4, #4]
 8003ffa:	6013      	streq	r3, [r2, #0]
 8003ffc:	460c      	movne	r4, r1
 8003ffe:	e7eb      	b.n	8003fd8 <_malloc_r+0x64>
 8004000:	460c      	mov	r4, r1
 8004002:	6849      	ldr	r1, [r1, #4]
 8004004:	e7cc      	b.n	8003fa0 <_malloc_r+0x2c>
 8004006:	1cc4      	adds	r4, r0, #3
 8004008:	f024 0403 	bic.w	r4, r4, #3
 800400c:	42a0      	cmp	r0, r4
 800400e:	d005      	beq.n	800401c <_malloc_r+0xa8>
 8004010:	1a21      	subs	r1, r4, r0
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f82e 	bl	8004074 <_sbrk_r>
 8004018:	3001      	adds	r0, #1
 800401a:	d0cf      	beq.n	8003fbc <_malloc_r+0x48>
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	e7db      	b.n	8003fd8 <_malloc_r+0x64>
 8004020:	20000204 	.word	0x20000204
 8004024:	20000208 	.word	0x20000208

08004028 <_realloc_r>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	4607      	mov	r7, r0
 800402c:	4614      	mov	r4, r2
 800402e:	460e      	mov	r6, r1
 8004030:	b921      	cbnz	r1, 800403c <_realloc_r+0x14>
 8004032:	4611      	mov	r1, r2
 8004034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004038:	f7ff bf9c 	b.w	8003f74 <_malloc_r>
 800403c:	b922      	cbnz	r2, 8004048 <_realloc_r+0x20>
 800403e:	f7ff ff4b 	bl	8003ed8 <_free_r>
 8004042:	4625      	mov	r5, r4
 8004044:	4628      	mov	r0, r5
 8004046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004048:	f000 f833 	bl	80040b2 <_malloc_usable_size_r>
 800404c:	42a0      	cmp	r0, r4
 800404e:	d20f      	bcs.n	8004070 <_realloc_r+0x48>
 8004050:	4621      	mov	r1, r4
 8004052:	4638      	mov	r0, r7
 8004054:	f7ff ff8e 	bl	8003f74 <_malloc_r>
 8004058:	4605      	mov	r5, r0
 800405a:	2800      	cmp	r0, #0
 800405c:	d0f2      	beq.n	8004044 <_realloc_r+0x1c>
 800405e:	4631      	mov	r1, r6
 8004060:	4622      	mov	r2, r4
 8004062:	f7ff ff15 	bl	8003e90 <memcpy>
 8004066:	4631      	mov	r1, r6
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ff35 	bl	8003ed8 <_free_r>
 800406e:	e7e9      	b.n	8004044 <_realloc_r+0x1c>
 8004070:	4635      	mov	r5, r6
 8004072:	e7e7      	b.n	8004044 <_realloc_r+0x1c>

08004074 <_sbrk_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	4c06      	ldr	r4, [pc, #24]	; (8004090 <_sbrk_r+0x1c>)
 8004078:	2300      	movs	r3, #0
 800407a:	4605      	mov	r5, r0
 800407c:	4608      	mov	r0, r1
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	f7fd f902 	bl	8001288 <_sbrk>
 8004084:	1c43      	adds	r3, r0, #1
 8004086:	d102      	bne.n	800408e <_sbrk_r+0x1a>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	b103      	cbz	r3, 800408e <_sbrk_r+0x1a>
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	bd38      	pop	{r3, r4, r5, pc}
 8004090:	2000029c 	.word	0x2000029c

08004094 <__ascii_wctomb>:
 8004094:	b149      	cbz	r1, 80040aa <__ascii_wctomb+0x16>
 8004096:	2aff      	cmp	r2, #255	; 0xff
 8004098:	bf85      	ittet	hi
 800409a:	238a      	movhi	r3, #138	; 0x8a
 800409c:	6003      	strhi	r3, [r0, #0]
 800409e:	700a      	strbls	r2, [r1, #0]
 80040a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80040a4:	bf98      	it	ls
 80040a6:	2001      	movls	r0, #1
 80040a8:	4770      	bx	lr
 80040aa:	4608      	mov	r0, r1
 80040ac:	4770      	bx	lr

080040ae <__malloc_lock>:
 80040ae:	4770      	bx	lr

080040b0 <__malloc_unlock>:
 80040b0:	4770      	bx	lr

080040b2 <_malloc_usable_size_r>:
 80040b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b6:	1f18      	subs	r0, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bfbc      	itt	lt
 80040bc:	580b      	ldrlt	r3, [r1, r0]
 80040be:	18c0      	addlt	r0, r0, r3
 80040c0:	4770      	bx	lr
	...

080040c4 <_init>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

080040d0 <_fini>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr
